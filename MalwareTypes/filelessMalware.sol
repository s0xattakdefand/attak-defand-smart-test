// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title FilelessMalwareAttackDefense - Full Attack and Defense Simulation for Fileless Malware in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Fileless Malware Contract (Vulnerable to Delegatecall Malware Injection)
contract InsecureFilelessMalware {
    address public logicContract; // Can be maliciously injected
    address public admin;

    constructor(address _logic) {
        logicContract = _logic;
        admin = msg.sender;
    }

    fallback() external payable {
        (bool success, ) = logicContract.delegatecall(msg.data);
        require(success, "Delegatecall failed");
    }

    receive() external payable {}
}

/// @notice Secure Fileless Malware Defense Contract (Strict Control of Delegatecall Targets)
contract SecureFilelessMalwareDefense {
    address public immutable trustedLogicContract;
    address public admin;

    event DelegateCallExecuted(address indexed logic, bytes data);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin");
        _;
    }

    constructor(address _trustedLogic) {
        trustedLogicContract = _trustedLogic;
        admin = msg.sender;
    }

    fallback() external payable {
        require(msg.sender == tx.origin, "Delegatecall must come from EOA"); // Optional
        (bool success, ) = trustedLogicContract.delegatecall(msg.data);
        require(success, "Delegatecall failed");

        emit DelegateCallExecuted(trustedLogicContract, msg.data);
    }

    receive() external payable {}
}

/// @notice Attack contract simulating fileless runtime malware
contract FilelessMalwareIntruder {
    bytes public payload;

    constructor(bytes memory _payload) {
        payload = _payload;
    }

    function inject(address target) external returns (bool success) {
        (success, ) = target.call(payload);
    }
}
