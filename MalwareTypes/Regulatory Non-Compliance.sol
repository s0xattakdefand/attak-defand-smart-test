// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title RegulatoryNonComplianceAttackDefense - Full Attack and Defense Simulation for Regulatory Non-Compliance in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Contract (Anyone Can Interact Without Screening)
contract InsecureUnregulatedContract {
    mapping(address => bool) public users;
    event UserRegistered(address indexed user);

    function register() external {
        users[msg.sender] = true;
        emit UserRegistered(msg.sender);
    }
}

/// @notice Secure Contract with KYC/Sanctions Screening
contract SecureComplianceContract {
    address public owner;
    mapping(address => bool) public kycPassed;
    mapping(address => bool) public users;
    mapping(address => bool) public blockedAddresses;

    event UserRegistered(address indexed user);
    event AddressBlocked(address indexed user);
    event KYCApproved(address indexed user);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    modifier onlyKYCUser() {
        require(kycPassed[msg.sender], "KYC not passed");
        require(!blockedAddresses[msg.sender], "Address blocked");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function approveKYC(address user) external onlyOwner {
        kycPassed[user] = true;
        emit KYCApproved(user);
    }

    function blockAddress(address user) external onlyOwner {
        blockedAddresses[user] = true;
        emit AddressBlocked(user);
    }

    function register() external onlyKYCUser {
        users[msg.sender] = true;
        emit UserRegistered(msg.sender);
    }
}

/// @notice Attack contract simulating bypass attempt
contract ComplianceIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function unregulatedRegister() external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("register()")
        );
    }
}
