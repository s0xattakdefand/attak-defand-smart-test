// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title ScarewareAttackDefense - Full Attack and Defense Simulation for Scareware in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Scareware Contract (Fake Warning + Urgent Action Trap)
contract InsecureScareware {
    address public attacker;

    event WarningIssued(address indexed user, string warning);
    event TokenDrained(address indexed victim, uint256 amount);

    constructor(address _attacker) {
        attacker = _attacker;
    }

    function fakeSecurityAlert() external payable {
        require(msg.value > 0, "Must send ETH to secure wallet!");
        payable(attacker).transfer(msg.value);

        emit WarningIssued(msg.sender, "URGENT: Wallet compromise detected! Send ETH to secure!");
        emit TokenDrained(msg.sender, msg.value);
    }

    receive() external payable {}
}

/// @notice Secure Contract with Explicit Confirmations and Zero Panic Triggers
contract SecureUserSafeContract {
    address public immutable owner;
    mapping(address => uint256) public deposits;

    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function deposit() external payable {
        require(msg.value > 0, "Zero deposit");
        deposits[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function requestWithdrawal(uint256 amount) external {
        require(deposits[msg.sender] >= amount, "Insufficient balance");
        require(amount <= 5 ether, "Withdrawal limit exceeded");

        deposits[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);

        emit Withdrawal(msg.sender, amount);
    }

    function emergencyRecover() external onlyOwner {
        payable(owner).transfer(address(this).balance);
    }
}

/// @notice Attack contract simulating fake urgency trigger
contract ScarewareIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function triggerFakeWarning() external payable returns (bool success) {
        (success, ) = targetInsecure.call{value: msg.value}(
            abi.encodeWithSignature("fakeSecurityAlert()")
        );
    }
}
