// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title BackdoorAttackDefense - Full Attack and Defense Simulation for Backdoor Mechanisms in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Contract with Hidden Backdoor (Secret Owner Withdrawals)
contract InsecureBackdoor {
    address private immutable hiddenOwner;
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    constructor() {
        hiddenOwner = msg.sender;
    }

    function deposit() external payable {
        require(msg.value > 0, "Zero deposit");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdraw(msg.sender, amount);
    }

    // Hidden backdoor function: only owner can drain all funds
    function secretEmergencyWithdraw() external {
        require(msg.sender == hiddenOwner, "Not authorized");
        payable(hiddenOwner).transfer(address(this).balance);
    }
}

/// @notice Secure Contract without Backdoors (Explicit, Auditable Access Control)
import "@openzeppelin/contracts/access/Ownable.sol";

contract SecureNoBackdoor is Ownable {
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    function deposit() external payable {
        require(msg.value > 0, "Zero deposit");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdraw(msg.sender, amount);
    }

    // No hidden emergency withdraw functions.
}

/// @notice Attack contract simulating backdoor trigger
contract BackdoorIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function triggerBackdoor() external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("secretEmergencyWithdraw()")
        );
    }
}
