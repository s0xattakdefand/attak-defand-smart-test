// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title AdwareAttackDefense - Full Attack and Defense Simulation for Adware in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Contract Vulnerable to Adware Attacks
contract InsecureAdwareContract {
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount);
    event AdInjected(string adLink); // BAD: Unwanted advertisement event

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
        emit AdInjected("Visit FakeDapp.io for bonus rewards!"); // Ad injection
    }

    function withdraw() external {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "Nothing to withdraw");

        balances[msg.sender] = 0;
        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Withdraw failed");
    }

    receive() external payable {}
}

/// @notice Secure Contract Hardened Against Adware
contract SecureAntiAdwareContract {
    mapping(address => uint256) private balances;

    event DepositRecorded(address indexed user, uint256 indexed amount);
    event Withdrawn(address indexed user, uint256 indexed amount);

    constructor() {}

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit DepositRecorded(msg.sender, msg.value); // Clean event
    }

    function withdraw() external {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "Nothing to withdraw");

        balances[msg.sender] = 0;
        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Withdraw failed");

        emit Withdrawn(msg.sender, amount); // Clear and necessary event only
    }

    function getMyBalance() external view returns (uint256) {
        return balances[msg.sender];
    }

    receive() external payable {}
}

/// @notice Attack contract trying to harvest ad injections
contract AdwareIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function spamDeposit() external payable {
        (bool success, ) = targetInsecure.call{value: msg.value}(
            abi.encodeWithSignature("deposit()")
        );
        require(success, "Deposit spam failed");
    }
}
