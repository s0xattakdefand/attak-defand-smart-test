// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title CrimewareAttackDefense - Full Attack and Defense Simulation for Crimeware in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Crimeware Contract (Wallet Drainer Simulation)
contract InsecureCrimeware {
    address public attacker;

    event DrainExecuted(address indexed victim, uint256 amount);

    constructor(address _attacker) {
        attacker = _attacker;
    }

    // Malicious: force victims to approve this contract first via phishing
    function stealFunds(address victim) external {
        uint256 balance = victim.balance;
        require(balance > 0, "No balance to steal");
        payable(attacker).transfer(balance);
        emit DrainExecuted(victim, balance);
    }

    // Receive ETH (victims send ETH unknowingly)
    receive() external payable {}
}

/// @notice Secure Wallet Contract (Defense Against Unauthorized Drainage and Crimeware)
contract SecureWallet {
    address public owner;
    mapping(address => bool) public trustedContracts;
    mapping(address => uint256) public lastInteractionBlock;

    uint256 public constant COOLDOWN_BLOCKS = 5; // 5 blocks between external contract calls

    event Deposit(address indexed sender, uint256 amount);
    event ExternalCall(address indexed target, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function deposit() external payable {
        emit Deposit(msg.sender, msg.value);
    }

    function approveTrustedContract(address contractAddress) external onlyOwner {
        trustedContracts[contractAddress] = true;
    }

    function revokeTrustedContract(address contractAddress) external onlyOwner {
        trustedContracts[contractAddress] = false;
    }

    function callTrusted(address payable target, uint256 amount) external onlyOwner {
        require(trustedContracts[target], "Not trusted");
        require(block.number >= lastInteractionBlock[target] + COOLDOWN_BLOCKS, "Cooldown active");

        (bool success, ) = target.call{value: amount}("");
        require(success, "External call failed");

        lastInteractionBlock[target] = block.number;
        emit ExternalCall(target, amount);
    }
}

/// @notice Attack simulation contract trying to abuse SecureWallet
contract CrimewareIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function launchAttack(address victim) external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("stealFunds(address)", victim)
        );
    }
}
