// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title WastefulResourceUtilizationAttackDefense - Attack and Defense Simulation for Wasteful Resource Utilization in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Resource Waster (Unbounded Loops, Storage Bloat, Event Flood)
contract InsecureResourceWaster {
    uint256[] public bigArray;
    uint256 public totalEvents;

    event UselessEvent(uint256 indexed id, uint256 timestamp);

    function storeMany(uint256 count) external {
        for (uint256 i = 0; i < count; i++) {
            bigArray.push(block.timestamp + i);
        }
    }

    function spamEvents(uint256 count) external {
        for (uint256 i = 0; i < count; i++) {
            emit UselessEvent(i, block.timestamp);
            totalEvents++;
        }
    }

    function heavyRead() external view returns (uint256 sum) {
        for (uint256 i = 0; i < bigArray.length; i++) {
            sum += bigArray[i];
        }
    }
}

/// @notice Secure Resource Efficient Contract (Bounded Operations, Minimal Storage, Clean Events)
contract SecureResourceEfficient {
    uint256[] private compactArray;
    uint256 public totalEvents;
    uint256 public constant MAX_BATCH_SIZE = 50;
    uint256 public constant MAX_EVENT_EMIT = 10;

    event UsefulEvent(uint256 indexed id, uint256 timestamp);

    function storeBatch(uint256[] calldata timestamps) external {
        require(timestamps.length <= MAX_BATCH_SIZE, "Too many items");
        for (uint256 i = 0; i < timestamps.length; i++) {
            compactArray.push(timestamps[i]);
        }
    }

    function emitUsefulEvents(uint256[] calldata ids) external {
        require(ids.length <= MAX_EVENT_EMIT, "Too many events");
        for (uint256 i = 0; i < ids.length; i++) {
            emit UsefulEvent(ids[i], block.timestamp);
            totalEvents++;
        }
    }

    function readSum(uint256 limit) external view returns (uint256 sum) {
        require(limit <= compactArray.length, "Limit too big");
        for (uint256 i = 0; i < limit; i++) {
            sum += compactArray[i];
        }
    }

    function pruneOldData(uint256 keepLast) external {
        require(keepLast < compactArray.length, "Invalid prune size");
        uint256 newLength = compactArray.length - keepLast;
        for (uint256 i = 0; i < newLength; i++) {
            compactArray[i] = compactArray[i + keepLast];
        }
        for (uint256 j = 0; j < keepLast; j++) {
            compactArray.pop();
        }
    }
}

/// @notice Attack contract simulating gas griefing
contract ResourceExhaustIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function exhaustStorage(uint256 spamCount) external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("storeMany(uint256)", spamCount)
        );
    }

    function spamLogs(uint256 spamCount) external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("spamEvents(uint256)", spamCount)
        );
    }
}
