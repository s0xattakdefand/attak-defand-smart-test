// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title KeyLoggerAttackDefense - Full Attack and Defense Simulation for Key Logger Vulnerabilities in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Contract Vulnerable to Key Logging
contract InsecureKeyLoggerContract {
    address public owner;

    event UserRegistered(address indexed user, string secretPhrase); // BAD: leaking secret

    mapping(address => string) public userSecrets; // BAD: open access

    constructor() {
        owner = msg.sender;
    }

    function register(string memory secretPhrase) external {
        userSecrets[msg.sender] = secretPhrase;
        emit UserRegistered(msg.sender, secretPhrase); // Logging secret publicly â€” spyware behavior
    }

    function getUserSecret(address user) external view returns (string memory) {
        return userSecrets[user];
    }
}

/// @notice Secure Contract Hardened Against Key Loggers
contract SecureAntiKeyLoggerContract {
    address public immutable admin;

    mapping(address => bool) public registeredUsers;
    mapping(address => bytes32) private commitmentHash;

    event UserRegisteredSecurely(address indexed user);

    constructor() {
        admin = msg.sender;
    }

    function register(bytes32 secretCommitment) external {
        require(!registeredUsers[msg.sender], "Already registered");
        commitmentHash[msg.sender] = secretCommitment;
        registeredUsers[msg.sender] = true;

        emit UserRegisteredSecurely(msg.sender); // Only user, no secret exposure
    }

    function verifyCommitment(address user, string memory revealedSecret) external view returns (bool) {
        bytes32 revealedHash = keccak256(abi.encodePacked(revealedSecret));
        return (commitmentHash[user] == revealedHash);
    }
}

/// @notice Attack contract simulating key logging
contract KeyLoggerIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function harvestSecret(address victim) external view returns (string memory secret) {
        (, bytes memory data) = targetInsecure.staticcall(
            abi.encodeWithSignature("getUserSecret(address)", victim)
        );
        secret = abi.decode(data, (string));
    }
}
