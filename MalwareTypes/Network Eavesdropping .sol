// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title NetworkEavesdroppingAttackDefense - Attack and Defense Simulation for Network Eavesdropping in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure MetaTx Relay (No Domain Binding or Encryption)
contract InsecureMetaTransactionRelay {
    mapping(address => uint256) public nonces;

    event MetaTransactionExecuted(address indexed user, string action);

    function executeMetaTransaction(address user, string calldata action, uint256 nonce, bytes memory signature) external {
        require(nonce == nonces[user], "Invalid nonce");

        bytes32 messageHash = keccak256(abi.encodePacked(user, action, nonce));
        address recoveredSigner = recoverSigner(messageHash, signature);

        require(recoveredSigner == user, "Invalid signature");

        nonces[user]++;
        emit MetaTransactionExecuted(user, action);
    }

    function recoverSigner(bytes32 hash, bytes memory signature) public pure returns (address) {
        return ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), signature);
    }
}

/// @notice Secure MetaTx Relay with Domain Binding and Replay Protection (EIP-712)
contract SecureMetaTransactionRelay {
    address public immutable owner;
    mapping(address => uint256) public nonces;
    bytes32 public constant META_TX_TYPEHASH = keccak256("MetaTransaction(address user,string action,uint256 nonce)");
    bytes32 public DOMAIN_SEPARATOR;

    event MetaTransactionExecuted(address indexed user, string action);

    constructor() {
        owner = msg.sender;
        DOMAIN_SEPARATOR = keccak256(
            abi.encode(
                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
                keccak256(bytes("SecureMetaTxRelay")),
                keccak256(bytes("1")),
                block.chainid,
                address(this)
            )
        );
    }

    function executeMetaTransaction(address user, string calldata action, uint256 nonce, bytes memory signature) external {
        require(nonce == nonces[user], "Invalid nonce");

        bytes32 structHash = keccak256(abi.encode(META_TX_TYPEHASH, user, keccak256(bytes(action)), nonce));
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
        address recoveredSigner = ECDSA.recover(digest, signature);

        require(recoveredSigner == user, "Invalid signature");

        nonces[user]++;
        emit MetaTransactionExecuted(user, action);
    }
}

/// @notice Attack contract simulating stolen signature replay
contract EavesdroppingIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function replayStolenMetaTx(address user, string calldata action, uint256 nonce, bytes calldata stolenSignature) external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("executeMetaTransaction(address,string,uint256,bytes)", user, action, nonce, stolenSignature)
        );
    }
}

/// @notice Minimal ECDSA Helper Library
library ECDSA {
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        require(signature.length == 65, "Invalid sig length");
        bytes32 r;
        bytes32 s;
        uint8 v;
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }
        return ecrecover(hash, v, r, s);
    }

    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}
