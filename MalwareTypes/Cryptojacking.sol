// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title CryptoJackingAttackDefense - Full Attack and Defense Simulation for Crypto Jacking in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Crypto Jacking Contract (Forcing Users to Pay Gas)
contract InsecureCryptoJacker {
    mapping(address => uint256) public stolenGas;

    event ForcedMine(address indexed victim, uint256 gasUsed);

    function fakeAction() external {
        // BAD: hidden heavy computation
        uint256 heavyResult = 0;
        for (uint256 i = 0; i < 1000; i++) {
            heavyResult += i**2;
        }
        stolenGas[msg.sender] += tx.gasprice * (block.gaslimit - gasleft());
        emit ForcedMine(msg.sender, tx.gasprice * (block.gaslimit - gasleft()));
    }
}

/// @notice Secure Anti-Crypto Jacking Contract (User Intent + Gas Guardrails)
contract SecureCryptoTransaction {
    address public immutable owner;
    uint256 public constant MAX_ALLOWED_GAS = 500000; // Max gas allowed per action

    event SafeActionExecuted(address indexed user);

    modifier gasLimitGuard() {
        require(gasleft() >= MAX_ALLOWED_GAS, "Not enough starting gas");
        uint256 gasStart = gasleft();
        _;
        uint256 gasSpent = gasStart - gasleft();
        require(gasSpent <= MAX_ALLOWED_GAS, "Exceeded allowed gas usage");
    }

    constructor() {
        owner = msg.sender;
    }

    function safeAction() external gasLimitGuard {
        // Safe, lightweight logic only
        uint256 result = 1;
        for (uint256 i = 0; i < 10; i++) {
            result += i;
        }
        emit SafeActionExecuted(msg.sender);
    }
}

/// @notice Attack contract simulating crypto jacking by forcing heavy gas usage
contract CryptoJackingIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function triggerHeavyGasUse() external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("fakeAction()")
        );
    }
}
