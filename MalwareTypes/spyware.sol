// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title SpywareAttackDefense - Full Attack and Defense Simulation for Spyware in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Contract Vulnerable to Spyware Attacks
contract InsecureSpywareContract {
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount); // Okay
    event SensitiveInfoLeaked(address indexed user, uint256 balance); // BAD: leaking sensitive data

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
        emit SensitiveInfoLeaked(msg.sender, balances[msg.sender]); // Spyware behavior
    }

    function getBalance(address user) external view returns (uint256) {
        return balances[user]; // BAD: Anyone can see any balance
    }
}

/// @notice Secure Contract Hardened Against Spyware
contract SecureAntiSpywareContract {
    mapping(address => uint256) private balances;

    event DepositRecorded(address indexed user, uint256 indexed amount);

    constructor() {}

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit DepositRecorded(msg.sender, msg.value); // No sensitive leak
    }

    function getMyBalance() external view returns (uint256) {
        return balances[msg.sender]; // Only self-readable
    }

    // No external exposure of internal balances mapping.
    receive() external payable {}
}

/// @notice Spyware contract simulating spying behavior
contract SpywareIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function harvestBalance(address user) external view returns (uint256 balance) {
        (, bytes memory data) = targetInsecure.staticcall(
            abi.encodeWithSignature("getBalance(address)", user)
        );
        balance = abi.decode(data, (uint256));
    }
}
