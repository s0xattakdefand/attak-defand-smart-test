// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title VirusAttackDefense - Full Attack and Defense Simulation for Viral Smart Contracts in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Virus Contract (Self-Deploying Malware Clone)
contract InsecureVirus {
    address public attacker;
    uint256 public infectionCount;

    event VirusReplicated(address indexed newClone, uint256 infectionNumber);

    constructor() {
        attacker = msg.sender;
    }

    function replicate() external {
        for (uint8 i = 0; i < 3; i++) {
            VirusClone clone = new VirusClone(attacker);
            infectionCount++;
            emit VirusReplicated(address(clone), infectionCount);
        }
    }

    receive() external payable {}
}

/// @notice Clone for Virus Spread
contract VirusClone {
    address public originalInfected;
    constructor(address _attacker) {
        originalInfected = _attacker;
    }

    function attack() external view returns (address) {
        return originalInfected;
    }
}

/// @notice Secure Factory (Whitelisted Deployments Only + No Self-Replication)
contract SecureFactory {
    address public immutable owner;
    mapping(address => bool) public whitelistedDeployers;

    event ContractDeployed(address indexed deployer, address contractAddress);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    modifier onlyWhitelisted() {
        require(whitelistedDeployers[msg.sender], "Not whitelisted");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function whitelistDeployer(address deployer) external onlyOwner {
        whitelistedDeployers[deployer] = true;
    }

    function deploySecureContract() external onlyWhitelisted returns (address newContract) {
        SafeContract safe = new SafeContract(msg.sender);
        newContract = address(safe);
        emit ContractDeployed(msg.sender, newContract);
    }
}

/// @notice Safe contract template (no self-replication)
contract SafeContract {
    address public deployer;

    constructor(address _deployer) {
        deployer = _deployer;
    }

    function secureLogic() external pure returns (string memory) {
        return "This is a safe, non-replicating contract.";
    }
}

/// @notice Attack contract trying to force mass clone deployment
contract VirusIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function launchMassReplication() external {
        targetInsecure.call(
            abi.encodeWithSignature("replicate()")
        );
    }
}
