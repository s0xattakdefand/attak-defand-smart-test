// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title MaliciousScriptInjectionAttackDefense - Attack and Defense Simulation for Malicious Script Injection in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Metadata Contract (Allows Arbitrary User-Injected Scripts)
contract InsecureMetadataStorage {
    mapping(uint256 => string) public metadataURIs;
    uint256 public counter;

    event MetadataSubmitted(uint256 indexed id, string uri);

    function submitMetadata(string calldata uri) external {
        metadataURIs[counter] = uri;
        emit MetadataSubmitted(counter, uri);
        counter++;
    }

    function getMetadataURI(uint256 id) external view returns (string memory) {
        return metadataURIs[id];
    }
}

/// @notice Secure Metadata Storage Contract (Sanitized and Validated)
contract SecureMetadataStorage {
    mapping(uint256 => string) public metadataURIs;
    uint256 public counter;
    address public immutable owner;

    uint256 public constant MAX_URI_LENGTH = 200;
    string public constant TRUSTED_PREFIX = "https://trustedsource/";

    event MetadataStored(uint256 indexed id, string uri);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function storeMetadata(string calldata uri) external onlyOwner {
        require(bytes(uri).length <= MAX_URI_LENGTH, "URI too long");
        require(startsWith(uri, TRUSTED_PREFIX), "Untrusted URI");

        metadataURIs[counter] = uri;
        emit MetadataStored(counter, uri);
        counter++;
    }

    function startsWith(string memory full, string memory prefix) public pure returns (bool) {
        bytes memory fullBytes = bytes(full);
        bytes memory prefixBytes = bytes(prefix);

        if (fullBytes.length < prefixBytes.length) {
            return false;
        }

        for (uint256 i = 0; i < prefixBytes.length; i++) {
            if (fullBytes[i] != prefixBytes[i]) {
                return false;
            }
        }
        return true;
    }

    function getMetadataURI(uint256 id) external view returns (string memory) {
        return metadataURIs[id];
    }
}

/// @notice Attack contract simulating injected malicious URI payload
contract MetadataInjectionIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function injectMaliciousURI(string calldata payload) external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("submitMetadata(string)", payload)
        );
    }
}
