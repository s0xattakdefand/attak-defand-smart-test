// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title PrivateKeyLossAttackDefense - Attack and Defense Simulation for Private Key Loss in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Admin-Only Contract (Single Point of Failure - Private Key Loss = Permanent Lock)
contract InsecureSingleAdmin {
    address public admin;

    event OwnershipTransferred(address indexed oldAdmin, address indexed newAdmin);

    constructor(address _admin) {
        admin = _admin;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not admin");
        _;
    }

    function criticalAction() external onlyAdmin {
        // Critical action only admin can do
    }
}

/// @notice Secure Multisig-Controlled Contract (Resistant to Single Private Key Loss)
contract SecureMultisigAdmin {
    address[] public owners;
    uint256 public requiredConfirmations;

    mapping(bytes32 => uint256) public confirmations;
    mapping(bytes32 => mapping(address => bool)) public hasConfirmed;

    event ProposalExecuted(bytes32 proposalId);
    event Confirmed(address indexed confirmer, bytes32 proposalId);

    constructor(address[] memory _owners, uint256 _requiredConfirmations) {
        require(_owners.length >= _requiredConfirmations, "Insufficient owners");
        owners = _owners;
        requiredConfirmations = _requiredConfirmations;
    }

    modifier onlyOwner() {
        bool isOwner = false;
        for (uint256 i = 0; i < owners.length; i++) {
            if (owners[i] == msg.sender) isOwner = true;
        }
        require(isOwner, "Not owner");
        _;
    }

    function proposeAndConfirm(bytes32 proposalId) external onlyOwner {
        require(!hasConfirmed[proposalId][msg.sender], "Already confirmed");
        confirmations[proposalId]++;
        hasConfirmed[proposalId][msg.sender] = true;
        emit Confirmed(msg.sender, proposalId);

        if (confirmations[proposalId] >= requiredConfirmations) {
            executeProposal(proposalId);
        }
    }

    function executeProposal(bytes32 proposalId) internal {
        // Critical action happens here after enough approvals
        emit ProposalExecuted(proposalId);
    }

    function getOwners() external view returns (address[] memory) {
        return owners;
    }
}
