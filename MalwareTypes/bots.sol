// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title BotAttackDefense - Full Attack and Defense Simulation for Bots in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Contract Vulnerable to Front-running and Bot Exploits
contract InsecureBotVulnerableContract {
    mapping(address => uint256) public bids;
    address public highestBidder;
    uint256 public highestBid;

    event NewBid(address indexed user, uint256 amount);

    function bid() external payable {
        require(msg.value > highestBid, "Bid too low");

        bids[msg.sender] += msg.value;
        highestBidder = msg.sender;
        highestBid = msg.value;

        emit NewBid(msg.sender, msg.value);
    }

    function claimReward() external view returns (string memory) {
        require(msg.sender == highestBidder, "Only highest bidder");
        return "You win!";
    }
}

/// @notice Secure Anti-Bot Contract (Commit-Reveal Protection)
contract SecureAntiBotContract {
    address public admin;
    uint256 public bidRevealStartTime;
    uint256 public constant COMMIT_PHASE_DURATION = 5 minutes;

    mapping(address => bytes32) public bidCommitments;
    mapping(address => uint256) public revealedBids;
    address public highestBidder;
    uint256 public highestBid;

    event CommitmentMade(address indexed user, bytes32 commitment);
    event BidRevealed(address indexed user, uint256 amount);

    constructor() {
        admin = msg.sender;
        bidRevealStartTime = block.timestamp + COMMIT_PHASE_DURATION;
    }

    function commitBid(bytes32 commitment) external {
        require(block.timestamp < bidRevealStartTime, "Commit phase over");
        bidCommitments[msg.sender] = commitment;
        emit CommitmentMade(msg.sender, commitment);
    }

    function revealBid(uint256 bidAmount, string memory secret) external payable {
        require(block.timestamp >= bidRevealStartTime, "Reveal phase not started");
        require(keccak256(abi.encodePacked(bidAmount, secret)) == bidCommitments[msg.sender], "Invalid reveal");
        require(msg.value == bidAmount, "Incorrect bid amount");

        revealedBids[msg.sender] = bidAmount;

        if (bidAmount > highestBid) {
            highestBid = bidAmount;
            highestBidder = msg.sender;
        }

        emit BidRevealed(msg.sender, bidAmount);
    }

    function claimReward() external view returns (string memory) {
        require(msg.sender == highestBidder, "Only highest bidder");
        return "You win securely!";
    }
}

/// @notice Bot attacker simulating mempool sniping
contract BotIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function snipeBid() external payable {
        (bool success, ) = targetInsecure.call{value: msg.value}(
            abi.encodeWithSignature("bid()")
        );
        require(success, "Sniping failed");
    }
}
