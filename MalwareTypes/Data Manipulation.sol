// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title DataManipulationAttackDefense - Full Attack and Defense Simulation for Data Manipulation Risks in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Oracle Feed Contract (Susceptible to Manipulation)
contract InsecureOracleFeed {
    uint256 public lastReportedPrice;
    address public reporter;

    event PriceUpdated(uint256 price);

    constructor() {
        reporter = msg.sender;
    }

    function updatePrice(uint256 newPrice) external {
        // BAD: Anyone can call this if reporter forgotten/changed
        lastReportedPrice = newPrice;
        emit PriceUpdated(newPrice);
    }

    function getPrice() external view returns (uint256) {
        return lastReportedPrice;
    }
}

/// @notice Secure Oracle Contract (Trusted Reporter + Replay Protection)
contract SecureOracleFeed {
    address public immutable owner;
    address public immutable trustedReporter;
    uint256 public lastPrice;
    uint256 public lastUpdateNonce;

    event PriceReported(uint256 price, uint256 nonce);

    constructor(address _trustedReporter) {
        owner = msg.sender;
        trustedReporter = _trustedReporter;
    }

    function reportPrice(uint256 price, uint256 nonce) external {
        require(msg.sender == trustedReporter, "Untrusted reporter");
        require(nonce > lastUpdateNonce, "Nonce replay detected");

        lastPrice = price;
        lastUpdateNonce = nonce;

        emit PriceReported(price, nonce);
    }

    function getLatestPrice() external view returns (uint256) {
        return lastPrice;
    }
}

/// @notice Attack contract simulating data manipulation injection
contract DataManipulationIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function manipulatePrice(uint256 fakePrice) external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("updatePrice(uint256)", fakePrice)
        );
    }
}
