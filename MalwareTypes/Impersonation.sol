// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title ImpersonationAttackDefense - Full Attack and Defense Simulation for Impersonation in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Contract Allowing Easy Impersonation (No Proper Signer Validation)
contract InsecureImpersonationContract {
    mapping(address => bool) public admins;

    event AdminGranted(address indexed user);

    function grantAdminRole(bytes memory signature) external {
        // BAD: Signature over static message allows reuse
        bytes32 messageHash = keccak256(abi.encodePacked("GrantMeAdmin"));
        address recovered = recoverSigner(messageHash, signature);
        admins[recovered] = true;
        emit AdminGranted(recovered);
    }

    function recoverSigner(bytes32 hash, bytes memory signature) public pure returns (address) {
        return ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), signature);
    }
}

/// @notice Secure Contract Requiring Strict Domain Binding and Nonce for Each Admin Action
contract SecureImpersonationGuard {
    address public immutable owner;
    mapping(address => bool) public admins;
    mapping(address => uint256) public usedNonces;

    bytes32 public constant GRANT_TYPEHASH = keccak256("GrantAdmin(address user,uint256 nonce)");
    bytes32 public DOMAIN_SEPARATOR;

    event AdminGranted(address indexed user);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor() {
        owner = msg.sender;
        DOMAIN_SEPARATOR = keccak256(
            abi.encode(
                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
                keccak256(bytes("SecureImpersonationGuard")),
                keccak256(bytes("1")),
                block.chainid,
                address(this)
            )
        );
    }

    function grantAdminRole(address user, uint256 nonce, bytes memory signature) external onlyOwner {
        require(nonce == usedNonces[user] + 1, "Invalid nonce");

        bytes32 structHash = keccak256(abi.encode(GRANT_TYPEHASH, user, nonce));
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
        address signer = ECDSA.recover(digest, signature);

        require(signer == user, "Signature mismatch");

        admins[user] = true;
        usedNonces[user] = nonce;

        emit AdminGranted(user);
    }
}

/// @notice Attack contract simulating signature replay impersonation
contract ImpersonationIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function replaySignature(bytes memory stolenSignature) external returns (bool success) {
        (success, ) = targetInsecure.call(
            abi.encodeWithSignature("grantAdminRole(bytes)", stolenSignature)
        );
    }
}

/// @notice Minimal ECDSA Helper Library
library ECDSA {
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        require(signature.length == 65, "Invalid sig length");
        bytes32 r;
        bytes32 s;
        uint8 v;
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }
        return ecrecover(hash, v, r, s);
    }

    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}
