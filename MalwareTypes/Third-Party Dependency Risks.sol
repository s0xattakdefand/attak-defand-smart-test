// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title ThirdPartyDependencyRisksAttackDefense - Attack and Defense Simulation for Third-Party Dependency Risks in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure Third-Party Dependency (Blind Trust In External Oracle)
contract InsecureThirdPartyConsumer {
    address public oracle;
    uint256 public lastFetchedValue;

    event ValueFetched(uint256 value);

    constructor(address _oracle) {
        oracle = _oracle;
    }

    function fetch() external {
        uint256 value = IOracle(oracle).getExternalData(); // Blindly trusting
        lastFetchedValue = value;
        emit ValueFetched(value);
    }
}

interface IOracle {
    function getExternalData() external view returns (uint256);
}

/// @notice Secure Third-Party Integration (Double-Check, Minimal Trust, Emergency Circuit Breaker)
contract SecureThirdPartyConsumer {
    address public immutable trustedOracle;
    uint256 public lastFetchedValue;
    uint256 public constant MAX_REASONABLE_VALUE = 1_000_000 ether;
    bool public emergencyPaused;
    address public owner;

    event ValueFetched(uint256 value);
    event EmergencyPaused();

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    modifier notPaused() {
        require(!emergencyPaused, "Paused");
        _;
    }

    constructor(address _trustedOracle) {
        trustedOracle = _trustedOracle;
        owner = msg.sender;
    }

    function fetch() external notPaused {
        uint256 value = IOracle(trustedOracle).getExternalData();

        require(value <= MAX_REASONABLE_VALUE, "Unreasonably high value from oracle");

        lastFetchedValue = value;
        emit ValueFetched(value);
    }

    function emergencyPause() external onlyOwner {
        emergencyPaused = true;
        emit EmergencyPaused();
    }
}

/// @notice Attack contract simulating malicious oracle behavior
contract OracleIntruder {
    function getExternalData() external pure returns (uint256) {
        return type(uint256).max; // Return absurd value to break consumers
    }
}
