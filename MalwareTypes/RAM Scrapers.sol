// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title RAMScrapperAttackDefense - Full Attack and Defense Simulation for RAM Scrappers in Web3 Smart Contracts
/// @author ChatGPT

/// @notice Insecure RAM Scrapper Target (Memory Exposure via fallback)
contract InsecureRAMScrapper {
    bytes public sensitiveData;
    address public owner;

    constructor(bytes memory _sensitiveData) {
        owner = msg.sender;
        sensitiveData = _sensitiveData;
    }

    fallback() external payable {
        assembly {
            // BAD: Directly return memory (potential leak)
            returndatacopy(0, 0, returndatasize())
            return(0, returndatasize())
        }
    }

    function updateSensitiveData(bytes memory newData) external {
        require(msg.sender == owner, "Not authorized");
        sensitiveData = newData;
    }

    receive() external payable {}
}

/// @notice Secure Contract (No Memory Exposure, Guarded Fallback)
contract SecureNoLeakContract {
    address public immutable owner;
    bytes32 private secureHash; // hashed form of sensitive data

    constructor(bytes memory _sensitiveData) {
        owner = msg.sender;
        secureHash = keccak256(_sensitiveData);
    }

    fallback() external payable {
        revert("Direct call rejected");
    }

    receive() external payable {}

    function verifySensitiveHash(bytes memory guess) external view returns (bool) {
        return keccak256(guess) == secureHash;
    }
}

/// @notice Attack contract simulating fallback scrape
contract RAMScrapperIntruder {
    address public targetInsecure;

    constructor(address _targetInsecure) {
        targetInsecure = _targetInsecure;
    }

    function tryScrape() external returns (bool success, bytes memory data) {
        (success, data) = targetInsecure.call(
            abi.encodePacked(bytes4(keccak256("nonexistentFunction()")))
        );
    }
}
