// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

contract SimStrategyAI {
    struct Payload {
        bytes4 selector;
        uint256 entropy;
        uint256 success;
        uint256 attempts;
    }

    mapping(uint256 => Payload) public payloads;
    uint256 public payloadCount;

    event PayloadEvolved(bytes4 selector, uint256 newEntropy);

    function evolve(bytes4 baseSelector, uint8 factor) external returns (bytes4 mutated) {
        mutated = bytes4(keccak256(abi.encodePacked(baseSelector, factor, block.timestamp)));
        payloads[payloadCount++] = Payload(mutated, uint256(uint32(mutated)), 0, 0);
        emit PayloadEvolved(mutated, uint32(mutated));
    }

    function logResult(uint256 index, bool success) external {
        Payload storage p = payloads[index];
        p.attempts++;
        if (success) p.success++;
    }

    function getBestPayload() external view returns (Payload memory) {
        uint256 maxScore = 0;
        Payload memory best;
        for (uint256 i = 0; i < payloadCount; i++) {
            uint256 score = (payloads[i].success * 100) / (payloads[i].attempts + 1);
            if (score > maxScore) {
                maxScore = score;
                best = payloads[i];
            }
        }
        return best;
    }
}
