// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// Advanced Malware Protection â€” Threat Detector & Response Layer
contract AMPMonitor {
    address public admin;
    bool public systemPaused;

    mapping(bytes4 => uint256) public selectorCount;
    mapping(address => uint256) public anomalyScore;

    event ThreatDetected(address indexed source, bytes4 selector, uint256 score);
    event SystemPaused();
    event SelectorLogged(bytes4 selector);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not admin");
        _;
    }

    modifier notPaused() {
        require(!systemPaused, "System paused due to threat");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function logSelector(bytes calldata data) external notPaused {
        bytes4 selector;
        assembly {
            selector := calldataload(data.offset)
        }

        selectorCount[selector]++;
        emit SelectorLogged(selector);

        // Entropy drift / anomaly detection (simple heuristic)
        if (selectorCount[selector] > 5) {
            anomalyScore[msg.sender] += 10;
        } else {
            anomalyScore[msg.sender] += 1;
        }

        if (anomalyScore[msg.sender] > 50) {
            systemPaused = true;
            emit ThreatDetected(msg.sender, selector, anomalyScore[msg.sender]);
            emit SystemPaused();
        }
    }

    function resetSystem() external onlyAdmin {
        systemPaused = false;
    }

    function getSelectorScore(bytes4 selector) external view returns (uint256) {
        return selectorCount[selector];
    }

    function getAnomalyScore(address addr) external view returns (uint256) {
        return anomalyScore[addr];
    }
}
