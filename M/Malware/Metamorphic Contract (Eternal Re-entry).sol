// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title MetamorphicCore - Self-replacing logic via proxy + CREATE2
contract MetamorphicProxy {
    address public logic;

    constructor(address _logic) {
        logic = _logic;
    }

    function updateLogic(address newLogic) external {
        logic = newLogic;
    }

    fallback() external payable {
        address impl = logic;
        assembly {
            calldatacopy(0, 0, calldatasize())
            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())
            switch result
            case 0 { revert(0, returndatasize()) }
            default { return(0, returndatasize()) }
        }
    }

    receive() external payable {}
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title MetamorphicLogic - Destroyable and swappable logic layer
contract MetamorphicLogic {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function nuke() external {
        require(msg.sender == owner, "Only owner");
        selfdestruct(payable(owner)); // ðŸ§© enables logic regeneration
    }
}
