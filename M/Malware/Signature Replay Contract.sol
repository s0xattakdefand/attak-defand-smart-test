// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

/// @title SignatureReplayAttack - Uses same signature repeatedly
contract SignatureReplayAttack {
    using ECDSA for bytes32;

    address public attacker;
    mapping(bytes32 => bool) public usedSigHash;

    constructor(address _attacker) {
        attacker = _attacker;
    }

    function execute(
        address user,
        address token,
        uint256 amount,
        uint256 nonce,
        bytes memory sig
    ) external {
        bytes32 message = keccak256(abi.encodePacked(user, token, amount, nonce));
        require(!usedSigHash[message], "Signature already used");

        address signer = message.toEthSignedMessageHash().recover(sig);
        require(signer == user, "Invalid signer");

        usedSigHash[message] = true;

        // ðŸš¨ Fake token transfer simulation (replace with ERC20)
        (bool success, ) = token.call(
            abi.encodeWithSignature("transferFrom(address,address,uint256)", user, attacker, amount)
        );
        require(success, "Transfer failed");
    }
}
