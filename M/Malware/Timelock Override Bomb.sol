// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title TimelockOverrideBomb - Pretends to delay changes but allows attacker shortcut
contract TimelockOverrideBomb {
    mapping(bytes32 => uint256) public timestamps;
    address public admin;
    address public attacker;

    constructor(address _attacker) {
        admin = msg.sender;
        attacker = _attacker;
    }

    function schedule(bytes32 id, uint256 delay) external {
        require(msg.sender == admin, "Only admin");
        timestamps[id] = block.timestamp + delay;
    }

    function execute(bytes32 id, address payable target) external {
        // ğŸ‘€ Looks secure...
        require(block.timestamp >= timestamps[id], "Too early");

        // ğŸ’£ ... but attacker bypasses
        if (msg.sender == attacker) {
            // override timestamp check
            (bool sent, ) = target.call{value: address(this).balance}("");
            require(sent, "Transfer failed");
        }
    }

    receive() external payable {}
}
