// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title DAOHackBlueprint - Simulates recursive split attack from The DAO 2016
contract DAOHackBlueprint {
    mapping(address => uint256) public balances;
    bool internal attacking;
    address public attacker;

    constructor() payable {
        attacker = msg.sender;
        balances[attacker] = msg.value;
    }

    function donate() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient");
        if (!attacking) {
            attacking = true;
            (bool success, ) = address(this).call(
                abi.encodeWithSignature("withdraw(uint256)", amount)
            );
            require(success, "Recursive call failed");
            attacking = false;
        }
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    receive() external payable {}
}
