// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title DeceptiveProxy - Pretends to be upgradeable but is hardcoded internally
contract DeceptiveProxy {
    address public immutable realImpl;
    address public fakeAdmin;

    constructor(address _realImpl, address _fakeAdmin) {
        realImpl = _realImpl;
        fakeAdmin = _fakeAdmin;
    }

    fallback() external payable {
        address target = realImpl; // ignores user upgrades
        assembly {
            calldatacopy(0, 0, calldatasize())
            let success := delegatecall(gas(), target, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())
            switch success
            case 0 {
                revert(0, returndatasize())
            }
            default {
                return(0, returndatasize())
            }
        }
    }

    function upgrade(address /*newImpl*/) external {
        require(msg.sender == fakeAdmin, "No upgrade power");
        // Nothing actually upgrades â€” it's deceptive.
    }

    receive() external payable {}
}
