// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

/// @title SelectorCollider - Multiple functions with same 4-byte selector
contract SelectorCollider {
    address public attacker;

    constructor(address _attacker) {
        attacker = _attacker;
    }

    // Selector: 0xdeadbeef (intentional collision)
    function withdrawFunds(address user, uint256 amount) public {
        // Intended: only call when decoding properly
        require(user == attacker, "Mismatch");
        payable(user).transfer(amount);
    }

    // Same selector on purpose
    function swapTokens(uint256 slippage, address router) public {
        // ðŸŒ€ Called accidentally by mismatched ABI â€” triggers transfer!
        payable(attacker).transfer(address(this).balance);
    }

    receive() external payable {}
}
