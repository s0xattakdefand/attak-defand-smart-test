{
	"id": "a66665471782ec745a0d5de4c73fb074",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/**\n * DEFENSE TYPE:\n * A contract that issues ephemeral port-like IDs using a secure incremental or random approach. \n * Doesn’t allow user-chosen ephemeral IDs => no collisions or guess attacks.\n */\ncontract SecureEphemeralPort {\n    using Counters for Counters.Counter;\n    Counters.Counter private _sessionCounter;\n\n    // ephemeral session => user\n    mapping(uint256 => address) public ephemeralOwner;\n\n    event EphemeralAllocated(uint256 ephemeralID, address owner);\n\n    /**\n     * @dev The contract picks ephemeral IDs sequentially or from VRF,\n     * not the user. Minimizes collision/hijack risk.\n     */\n    function createEphemeral() external {\n        _sessionCounter.increment();\n        uint256 newID = _sessionCounter.current();\n        ephemeralOwner[newID] = msg.sender;\n        emit EphemeralAllocated(newID, msg.sender);\n    }\n\n    /**\n     * @dev Example usage: check ephemeral ID ownership\n     */\n    function isOwnerOf(uint256 ephemeralID, address user) external view returns (bool) {\n        return ephemeralOwner[ephemeralID] == user;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Counters.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/utils/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122088c100dc411badc7b602fdb0dac506d1a987b85f37234fcf08aa04c518d1095e64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122088c100dc411badc7b602fdb0dac506d1a987b85f37234fcf08aa04c518d1095e64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 0xC1 STOP 0xDC COINBASE SHL 0xAD 0xC7 0xB6 MUL REVERT 0xB0 0xDA 0xC5 MOD 0xD1 0xA9 DUP8 0xB8 PUSH0 CALLDATACOPY 0x23 0x4F 0xCF ADDMOD 0xAA DIV 0xC5 XOR 0xD1 MULMOD MCOPY PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "424:971:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122088c100dc411badc7b602fdb0dac506d1a987b85f37234fcf08aa04c518d1095e64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 0xC1 STOP 0xDC COINBASE SHL 0xAD 0xC7 0xB6 MUL REVERT 0xB0 0xDA 0xC5 MOD 0xD1 0xA9 DUP8 0xB8 PUSH0 CALLDATACOPY 0x23 0x4F 0xCF ADDMOD 0xAA DIV 0xC5 XOR 0xD1 MULMOD MCOPY PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "424:971:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122088c100dc411badc7b602fdb0dac506d1a987b85f37234fcf08aa04c518d1095e64736f6c634300081a0033",
									".code": [
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7814  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7814  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220615fd5df0861fec931410bfc4b95e9ab6a8b1ee4c621c4307e4ee7cc754e337464736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220615fd5df0861fec931410bfc4b95e9ab6a8b1ee4c621c4307e4ee7cc754e337464736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x5FD5 0xDF ADDMOD PUSH2 0xFEC9 BALANCE COINBASE SIGNEXTEND 0xFC 0x4B SWAP6 0xE9 0xAB PUSH11 0x8B1EE4C621C4307E4EE7CC PUSH22 0x4E337464736F6C634300081A00330000000000000000 ",
							"sourceMap": "344:7470:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220615fd5df0861fec931410bfc4b95e9ab6a8b1ee4c621c4307e4ee7cc754e337464736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x5FD5 0xDF ADDMOD PUSH2 0xFEC9 BALANCE COINBASE SIGNEXTEND 0xFC 0x4B SWAP6 0xE9 0xAB PUSH11 0x8B1EE4C621C4307E4EE7CC PUSH22 0x4E337464736F6C634300081A00330000000000000000 ",
							"sourceMap": "344:7470:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 344,
									"end": 7814,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220615fd5df0861fec931410bfc4b95e9ab6a8b1ee4c621c4307e4ee7cc754e337464736f6c634300081a0033",
									".code": [
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 344,
											"end": 7814,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol": {
				"SecureEphemeralPort": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "ephemeralID",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "EphemeralAllocated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "createEphemeral",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "ephemeralOwner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "ephemeralID",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "isOwnerOf",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createEphemeral()": {
								"details": "The contract picks ephemeral IDs sequentially or from VRF, not the user. Minimizes collision/hijack risk."
							},
							"isOwnerOf(uint256,address)": {
								"details": "Example usage: check ephemeral ID ownership"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":378:1247  contract SecureEphemeralPort {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":378:1247  contract SecureEphemeralPort {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x9ac016e2\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xbe1f23c0\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xf5a94034\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1103:1245  function isOwnerOf(uint256 ephemeralID, address user) external view returns (bool) {... */\n    tag_3:\n      tag_6\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_7\n      swap2\n      swap1\n      tag_8\n      jump\t// in\n    tag_7:\n      tag_9\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      tag_10\n      swap2\n      swap1\n      tag_11\n      jump\t// in\n    tag_10:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":798:1025  function createEphemeral() external {... */\n    tag_4:\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      stop\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":534:583  mapping(uint256 => address) public ephemeralOwner */\n    tag_5:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1103:1245  function isOwnerOf(uint256 ephemeralID, address user) external view returns (bool) {... */\n    tag_9:\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1180:1184  bool */\n      0x00\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1234:1238  user */\n      dup2\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1203:1238  ephemeralOwner[ephemeralID] == user */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1203:1217  ephemeralOwner */\n      0x01\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1203:1230  ephemeralOwner[ephemeralID] */\n      0x00\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1218:1229  ephemeralID */\n      dup6\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1203:1230  ephemeralOwner[ephemeralID] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1203:1238  ephemeralOwner[ephemeralID] == user */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1196:1238  return ephemeralOwner[ephemeralID] == user */\n      swap1\n      pop\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1103:1245  function isOwnerOf(uint256 ephemeralID, address user) external view returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":798:1025  function createEphemeral() external {... */\n    tag_13:\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":844:871  _sessionCounter.increment() */\n      tag_22\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":844:859  _sessionCounter */\n      0x00\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":844:869  _sessionCounter.increment */\n      tag_23\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":844:871  _sessionCounter.increment() */\n      jump\t// in\n    tag_22:\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":881:894  uint256 newID */\n      0x00\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":897:922  _sessionCounter.current() */\n      tag_24\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":897:912  _sessionCounter */\n      0x00\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":897:920  _sessionCounter.current */\n      tag_25\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":897:922  _sessionCounter.current() */\n      jump\t// in\n    tag_24:\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":881:922  uint256 newID = _sessionCounter.current() */\n      swap1\n      pop\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":956:966  msg.sender */\n      caller\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":932:946  ephemeralOwner */\n      0x01\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":932:953  ephemeralOwner[newID] */\n      0x00\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":947:952  newID */\n      dup4\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":932:953  ephemeralOwner[newID] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":932:966  ephemeralOwner[newID] = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":981:1018  EphemeralAllocated(newID, msg.sender) */\n      0xd8aeb6b9f86d6e27269b062abae340b8aa70766460b785b655e5653f1485f4c0\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1000:1005  newID */\n      dup2\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":1007:1017  msg.sender */\n      caller\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":981:1018  EphemeralAllocated(newID, msg.sender) */\n      mload(0x40)\n      tag_26\n      swap3\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":834:1025  {... */\n      pop\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":798:1025  function createEphemeral() external {... */\n      jump\t// out\n        /* \"E/Ephemeral Port/Randomness  Secure ephemeral \\xe2\\x80\\x9cport\\xe2\\x80\\x9d ID.sol\":534:583  mapping(uint256 => address) public ephemeralOwner */\n    tag_17:\n      mstore(0x20, 0x01)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":945:1068  function increment(Counter storage counter) internal {... */\n    tag_23:\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":1050:1051  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":1032:1039  counter */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":1032:1046  counter._value */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":1032:1051  counter._value += 1 */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":945:1068  function increment(Counter storage counter) internal {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":827:939  function current(Counter storage counter) internal view returns (uint256) {... */\n    tag_25:\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":892:899  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":918:925  counter */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":918:932  counter._value */\n      0x00\n      add\n      sload\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":911:932  return counter._value */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":827:939  function current(Counter storage counter) internal view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_31:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:411   */\n    tag_33:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":400:405   */\n      dup2\n        /* \"#utility.yul\":389:405   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:411   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":417:539   */\n    tag_34:\n        /* \"#utility.yul\":490:514   */\n      tag_50\n        /* \"#utility.yul\":508:513   */\n      dup2\n        /* \"#utility.yul\":490:514   */\n      tag_33\n      jump\t// in\n    tag_50:\n        /* \"#utility.yul\":483:488   */\n      dup2\n        /* \"#utility.yul\":480:515   */\n      eq\n        /* \"#utility.yul\":470:533   */\n      tag_51\n      jumpi\n        /* \"#utility.yul\":529:530   */\n      0x00\n        /* \"#utility.yul\":526:527   */\n      dup1\n        /* \"#utility.yul\":519:531   */\n      revert\n        /* \"#utility.yul\":470:533   */\n    tag_51:\n        /* \"#utility.yul\":417:539   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":545:684   */\n    tag_35:\n        /* \"#utility.yul\":591:596   */\n      0x00\n        /* \"#utility.yul\":629:635   */\n      dup2\n        /* \"#utility.yul\":616:636   */\n      calldataload\n        /* \"#utility.yul\":607:636   */\n      swap1\n      pop\n        /* \"#utility.yul\":645:678   */\n      tag_53\n        /* \"#utility.yul\":672:677   */\n      dup2\n        /* \"#utility.yul\":645:678   */\n      tag_34\n      jump\t// in\n    tag_53:\n        /* \"#utility.yul\":545:684   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":690:816   */\n    tag_36:\n        /* \"#utility.yul\":727:734   */\n      0x00\n        /* \"#utility.yul\":767:809   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":760:765   */\n      dup3\n        /* \"#utility.yul\":756:810   */\n      and\n        /* \"#utility.yul\":745:810   */\n      swap1\n      pop\n        /* \"#utility.yul\":690:816   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":822:918   */\n    tag_37:\n        /* \"#utility.yul\":859:866   */\n      0x00\n        /* \"#utility.yul\":888:912   */\n      tag_56\n        /* \"#utility.yul\":906:911   */\n      dup3\n        /* \"#utility.yul\":888:912   */\n      tag_36\n      jump\t// in\n    tag_56:\n        /* \"#utility.yul\":877:912   */\n      swap1\n      pop\n        /* \"#utility.yul\":822:918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1046   */\n    tag_38:\n        /* \"#utility.yul\":997:1021   */\n      tag_58\n        /* \"#utility.yul\":1015:1020   */\n      dup2\n        /* \"#utility.yul\":997:1021   */\n      tag_37\n      jump\t// in\n    tag_58:\n        /* \"#utility.yul\":990:995   */\n      dup2\n        /* \"#utility.yul\":987:1022   */\n      eq\n        /* \"#utility.yul\":977:1040   */\n      tag_59\n      jumpi\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1033:1034   */\n      dup1\n        /* \"#utility.yul\":1026:1038   */\n      revert\n        /* \"#utility.yul\":977:1040   */\n    tag_59:\n        /* \"#utility.yul\":924:1046   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1191   */\n    tag_39:\n        /* \"#utility.yul\":1098:1103   */\n      0x00\n        /* \"#utility.yul\":1136:1142   */\n      dup2\n        /* \"#utility.yul\":1123:1143   */\n      calldataload\n        /* \"#utility.yul\":1114:1143   */\n      swap1\n      pop\n        /* \"#utility.yul\":1152:1185   */\n      tag_61\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1152:1185   */\n      tag_38\n      jump\t// in\n    tag_61:\n        /* \"#utility.yul\":1052:1191   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1197:1671   */\n    tag_8:\n        /* \"#utility.yul\":1265:1271   */\n      0x00\n        /* \"#utility.yul\":1273:1279   */\n      dup1\n        /* \"#utility.yul\":1322:1324   */\n      0x40\n        /* \"#utility.yul\":1310:1319   */\n      dup4\n        /* \"#utility.yul\":1301:1308   */\n      dup6\n        /* \"#utility.yul\":1297:1320   */\n      sub\n        /* \"#utility.yul\":1293:1325   */\n      slt\n        /* \"#utility.yul\":1290:1409   */\n      iszero\n      tag_63\n      jumpi\n        /* \"#utility.yul\":1328:1407   */\n      tag_64\n      tag_31\n      jump\t// in\n    tag_64:\n        /* \"#utility.yul\":1290:1409   */\n    tag_63:\n        /* \"#utility.yul\":1448:1449   */\n      0x00\n        /* \"#utility.yul\":1473:1526   */\n      tag_65\n        /* \"#utility.yul\":1518:1525   */\n      dup6\n        /* \"#utility.yul\":1509:1515   */\n      dup3\n        /* \"#utility.yul\":1498:1507   */\n      dup7\n        /* \"#utility.yul\":1494:1516   */\n      add\n        /* \"#utility.yul\":1473:1526   */\n      tag_35\n      jump\t// in\n    tag_65:\n        /* \"#utility.yul\":1463:1526   */\n      swap3\n      pop\n        /* \"#utility.yul\":1419:1536   */\n      pop\n        /* \"#utility.yul\":1575:1577   */\n      0x20\n        /* \"#utility.yul\":1601:1654   */\n      tag_66\n        /* \"#utility.yul\":1646:1653   */\n      dup6\n        /* \"#utility.yul\":1637:1643   */\n      dup3\n        /* \"#utility.yul\":1626:1635   */\n      dup7\n        /* \"#utility.yul\":1622:1644   */\n      add\n        /* \"#utility.yul\":1601:1654   */\n      tag_39\n      jump\t// in\n    tag_66:\n        /* \"#utility.yul\":1591:1654   */\n      swap2\n      pop\n        /* \"#utility.yul\":1546:1664   */\n      pop\n        /* \"#utility.yul\":1197:1671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1677:1767   */\n    tag_40:\n        /* \"#utility.yul\":1711:1718   */\n      0x00\n        /* \"#utility.yul\":1754:1759   */\n      dup2\n        /* \"#utility.yul\":1747:1760   */\n      iszero\n        /* \"#utility.yul\":1740:1761   */\n      iszero\n        /* \"#utility.yul\":1729:1761   */\n      swap1\n      pop\n        /* \"#utility.yul\":1677:1767   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1773:1882   */\n    tag_41:\n        /* \"#utility.yul\":1854:1875   */\n      tag_69\n        /* \"#utility.yul\":1869:1874   */\n      dup2\n        /* \"#utility.yul\":1854:1875   */\n      tag_40\n      jump\t// in\n    tag_69:\n        /* \"#utility.yul\":1849:1852   */\n      dup3\n        /* \"#utility.yul\":1842:1876   */\n      mstore\n        /* \"#utility.yul\":1773:1882   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1888:2098   */\n    tag_11:\n        /* \"#utility.yul\":1975:1979   */\n      0x00\n        /* \"#utility.yul\":2013:2015   */\n      0x20\n        /* \"#utility.yul\":2002:2011   */\n      dup3\n        /* \"#utility.yul\":1998:2016   */\n      add\n        /* \"#utility.yul\":1990:2016   */\n      swap1\n      pop\n        /* \"#utility.yul\":2026:2091   */\n      tag_71\n        /* \"#utility.yul\":2088:2089   */\n      0x00\n        /* \"#utility.yul\":2077:2086   */\n      dup4\n        /* \"#utility.yul\":2073:2090   */\n      add\n        /* \"#utility.yul\":2064:2070   */\n      dup5\n        /* \"#utility.yul\":2026:2091   */\n      tag_41\n      jump\t// in\n    tag_71:\n        /* \"#utility.yul\":1888:2098   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2104:2433   */\n    tag_16:\n        /* \"#utility.yul\":2163:2169   */\n      0x00\n        /* \"#utility.yul\":2212:2214   */\n      0x20\n        /* \"#utility.yul\":2200:2209   */\n      dup3\n        /* \"#utility.yul\":2191:2198   */\n      dup5\n        /* \"#utility.yul\":2187:2210   */\n      sub\n        /* \"#utility.yul\":2183:2215   */\n      slt\n        /* \"#utility.yul\":2180:2299   */\n      iszero\n      tag_73\n      jumpi\n        /* \"#utility.yul\":2218:2297   */\n      tag_74\n      tag_31\n      jump\t// in\n    tag_74:\n        /* \"#utility.yul\":2180:2299   */\n    tag_73:\n        /* \"#utility.yul\":2338:2339   */\n      0x00\n        /* \"#utility.yul\":2363:2416   */\n      tag_75\n        /* \"#utility.yul\":2408:2415   */\n      dup5\n        /* \"#utility.yul\":2399:2405   */\n      dup3\n        /* \"#utility.yul\":2388:2397   */\n      dup6\n        /* \"#utility.yul\":2384:2406   */\n      add\n        /* \"#utility.yul\":2363:2416   */\n      tag_35\n      jump\t// in\n    tag_75:\n        /* \"#utility.yul\":2353:2416   */\n      swap2\n      pop\n        /* \"#utility.yul\":2309:2426   */\n      pop\n        /* \"#utility.yul\":2104:2433   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2439:2557   */\n    tag_42:\n        /* \"#utility.yul\":2526:2550   */\n      tag_77\n        /* \"#utility.yul\":2544:2549   */\n      dup2\n        /* \"#utility.yul\":2526:2550   */\n      tag_37\n      jump\t// in\n    tag_77:\n        /* \"#utility.yul\":2521:2524   */\n      dup3\n        /* \"#utility.yul\":2514:2551   */\n      mstore\n        /* \"#utility.yul\":2439:2557   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2563:2785   */\n    tag_19:\n        /* \"#utility.yul\":2656:2660   */\n      0x00\n        /* \"#utility.yul\":2694:2696   */\n      0x20\n        /* \"#utility.yul\":2683:2692   */\n      dup3\n        /* \"#utility.yul\":2679:2697   */\n      add\n        /* \"#utility.yul\":2671:2697   */\n      swap1\n      pop\n        /* \"#utility.yul\":2707:2778   */\n      tag_79\n        /* \"#utility.yul\":2775:2776   */\n      0x00\n        /* \"#utility.yul\":2764:2773   */\n      dup4\n        /* \"#utility.yul\":2760:2777   */\n      add\n        /* \"#utility.yul\":2751:2757   */\n      dup5\n        /* \"#utility.yul\":2707:2778   */\n      tag_42\n      jump\t// in\n    tag_79:\n        /* \"#utility.yul\":2563:2785   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2791:2909   */\n    tag_43:\n        /* \"#utility.yul\":2878:2902   */\n      tag_81\n        /* \"#utility.yul\":2896:2901   */\n      dup2\n        /* \"#utility.yul\":2878:2902   */\n      tag_33\n      jump\t// in\n    tag_81:\n        /* \"#utility.yul\":2873:2876   */\n      dup3\n        /* \"#utility.yul\":2866:2903   */\n      mstore\n        /* \"#utility.yul\":2791:2909   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2915:3247   */\n    tag_27:\n        /* \"#utility.yul\":3036:3040   */\n      0x00\n        /* \"#utility.yul\":3074:3076   */\n      0x40\n        /* \"#utility.yul\":3063:3072   */\n      dup3\n        /* \"#utility.yul\":3059:3077   */\n      add\n        /* \"#utility.yul\":3051:3077   */\n      swap1\n      pop\n        /* \"#utility.yul\":3087:3158   */\n      tag_83\n        /* \"#utility.yul\":3155:3156   */\n      0x00\n        /* \"#utility.yul\":3144:3153   */\n      dup4\n        /* \"#utility.yul\":3140:3157   */\n      add\n        /* \"#utility.yul\":3131:3137   */\n      dup6\n        /* \"#utility.yul\":3087:3158   */\n      tag_43\n      jump\t// in\n    tag_83:\n        /* \"#utility.yul\":3168:3240   */\n      tag_84\n        /* \"#utility.yul\":3236:3238   */\n      0x20\n        /* \"#utility.yul\":3225:3234   */\n      dup4\n        /* \"#utility.yul\":3221:3239   */\n      add\n        /* \"#utility.yul\":3212:3218   */\n      dup5\n        /* \"#utility.yul\":3168:3240   */\n      tag_42\n      jump\t// in\n    tag_84:\n        /* \"#utility.yul\":2915:3247   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e848c59e51b03a3396a2b83d979eaa6f193ba57c0310c22e272d079dc112bd6f64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b506103c68061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80639ac016e214610043578063be1f23c014610073578063f5a940341461007d575b5f80fd5b61005d60048036038101906100589190610296565b6100ad565b60405161006a91906102ee565b60405180910390f35b61007b610115565b005b61009760048036038101906100929190610307565b6101b5565b6040516100a49190610341565b60405180910390f35b5f8173ffffffffffffffffffffffffffffffffffffffff1660015f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b61011e5f6101e5565b5f6101285f6101f9565b90503360015f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd8aeb6b9f86d6e27269b062abae340b8aa70766460b785b655e5653f1485f4c081336040516101aa929190610369565b60405180910390a150565b6001602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001815f015f828254019250508190555050565b5f815f01549050919050565b5f80fd5b5f819050919050565b61021b81610209565b8114610225575f80fd5b50565b5f8135905061023681610212565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102658261023c565b9050919050565b6102758161025b565b811461027f575f80fd5b50565b5f813590506102908161026c565b92915050565b5f80604083850312156102ac576102ab610205565b5b5f6102b985828601610228565b92505060206102ca85828601610282565b9150509250929050565b5f8115159050919050565b6102e8816102d4565b82525050565b5f6020820190506103015f8301846102df565b92915050565b5f6020828403121561031c5761031b610205565b5b5f61032984828501610228565b91505092915050565b61033b8161025b565b82525050565b5f6020820190506103545f830184610332565b92915050565b61036381610209565b82525050565b5f60408201905061037c5f83018561035a565b6103896020830184610332565b939250505056fea2646970667358221220e848c59e51b03a3396a2b83d979eaa6f193ba57c0310c22e272d079dc112bd6f64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C6 DUP1 PUSH2 0x1C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9AC016E2 EQ PUSH2 0x43 JUMPI DUP1 PUSH4 0xBE1F23C0 EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0xF5A94034 EQ PUSH2 0x7D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x5D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x58 SWAP2 SWAP1 PUSH2 0x296 JUMP JUMPDEST PUSH2 0xAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6A SWAP2 SWAP1 PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7B PUSH2 0x115 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x97 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x92 SWAP2 SWAP1 PUSH2 0x307 JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA4 SWAP2 SWAP1 PUSH2 0x341 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11E PUSH0 PUSH2 0x1E5 JUMP JUMPDEST PUSH0 PUSH2 0x128 PUSH0 PUSH2 0x1F9 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xD8AEB6B9F86D6E27269B062ABAE340B8AA70766460B785B655E5653F1485F4C0 DUP2 CALLER PUSH1 0x40 MLOAD PUSH2 0x1AA SWAP3 SWAP2 SWAP1 PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH0 ADD PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21B DUP2 PUSH2 0x209 JUMP JUMPDEST DUP2 EQ PUSH2 0x225 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x236 DUP2 PUSH2 0x212 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x265 DUP3 PUSH2 0x23C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x275 DUP2 PUSH2 0x25B JUMP JUMPDEST DUP2 EQ PUSH2 0x27F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x290 DUP2 PUSH2 0x26C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AC JUMPI PUSH2 0x2AB PUSH2 0x205 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2B9 DUP6 DUP3 DUP7 ADD PUSH2 0x228 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2CA DUP6 DUP3 DUP7 ADD PUSH2 0x282 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E8 DUP2 PUSH2 0x2D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x301 PUSH0 DUP4 ADD DUP5 PUSH2 0x2DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31C JUMPI PUSH2 0x31B PUSH2 0x205 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x329 DUP5 DUP3 DUP6 ADD PUSH2 0x228 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x33B DUP2 PUSH2 0x25B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x354 PUSH0 DUP4 ADD DUP5 PUSH2 0x332 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x363 DUP2 PUSH2 0x209 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x37C PUSH0 DUP4 ADD DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH2 0x389 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x332 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 BASEFEE 0xC5 SWAP15 MLOAD 0xB0 GASPRICE CALLER SWAP7 LOG2 0xB8 RETURNDATASIZE SWAP8 SWAP15 0xAA PUSH16 0x193BA57C0310C22E272D079DC112BD6F PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "378:869:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@createEphemeral_472": {
									"entryPoint": 277,
									"id": 472,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@current_17": {
									"entryPoint": 505,
									"id": 17,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@ephemeralOwner_437": {
									"entryPoint": 437,
									"id": 437,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@increment_31": {
									"entryPoint": 485,
									"id": 31,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@isOwnerOf_489": {
									"entryPoint": 173,
									"id": 489,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 642,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 552,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 775,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_address": {
									"entryPoint": 662,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 818,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 735,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 858,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 833,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 750,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": 873,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 603,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 724,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 572,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 521,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 517,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 620,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 530,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:3250:3",
										"nodeType": "YulBlock",
										"src": "0:3250:3",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:3",
													"nodeType": "YulBlock",
													"src": "47:35:3",
													"statements": [
														{
															"nativeSrc": "57:19:3",
															"nodeType": "YulAssignment",
															"src": "57:19:3",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:3",
																		"nodeType": "YulLiteral",
																		"src": "73:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:3",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:3"
																},
																"nativeSrc": "67:9:3",
																"nodeType": "YulFunctionCall",
																"src": "67:9:3"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:3"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:3",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:3",
														"nodeType": "YulTypedName",
														"src": "40:6:3",
														"type": ""
													}
												],
												"src": "7:75:3"
											},
											{
												"body": {
													"nativeSrc": "177:28:3",
													"nodeType": "YulBlock",
													"src": "177:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:3",
																		"nodeType": "YulLiteral",
																		"src": "194:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:3",
																		"nodeType": "YulLiteral",
																		"src": "197:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:3"
																},
																"nativeSrc": "187:12:3",
																"nodeType": "YulFunctionCall",
																"src": "187:12:3"
															},
															"nativeSrc": "187:12:3",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:3"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:3",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:3"
											},
											{
												"body": {
													"nativeSrc": "300:28:3",
													"nodeType": "YulBlock",
													"src": "300:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:3",
																		"nodeType": "YulLiteral",
																		"src": "317:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:3",
																		"nodeType": "YulLiteral",
																		"src": "320:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:3"
																},
																"nativeSrc": "310:12:3",
																"nodeType": "YulFunctionCall",
																"src": "310:12:3"
															},
															"nativeSrc": "310:12:3",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:3"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:3",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:3"
											},
											{
												"body": {
													"nativeSrc": "379:32:3",
													"nodeType": "YulBlock",
													"src": "379:32:3",
													"statements": [
														{
															"nativeSrc": "389:16:3",
															"nodeType": "YulAssignment",
															"src": "389:16:3",
															"value": {
																"name": "value",
																"nativeSrc": "400:5:3",
																"nodeType": "YulIdentifier",
																"src": "400:5:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:3",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "334:77:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:3",
														"nodeType": "YulTypedName",
														"src": "361:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:3",
														"nodeType": "YulTypedName",
														"src": "371:7:3",
														"type": ""
													}
												],
												"src": "334:77:3"
											},
											{
												"body": {
													"nativeSrc": "460:79:3",
													"nodeType": "YulBlock",
													"src": "460:79:3",
													"statements": [
														{
															"body": {
																"nativeSrc": "517:16:3",
																"nodeType": "YulBlock",
																"src": "517:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "526:1:3",
																					"nodeType": "YulLiteral",
																					"src": "526:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "529:1:3",
																					"nodeType": "YulLiteral",
																					"src": "529:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "519:6:3",
																				"nodeType": "YulIdentifier",
																				"src": "519:6:3"
																			},
																			"nativeSrc": "519:12:3",
																			"nodeType": "YulFunctionCall",
																			"src": "519:12:3"
																		},
																		"nativeSrc": "519:12:3",
																		"nodeType": "YulExpressionStatement",
																		"src": "519:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "483:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "483:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "508:5:3",
																						"nodeType": "YulIdentifier",
																						"src": "508:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "490:17:3",
																					"nodeType": "YulIdentifier",
																					"src": "490:17:3"
																				},
																				"nativeSrc": "490:24:3",
																				"nodeType": "YulFunctionCall",
																				"src": "490:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "480:2:3",
																			"nodeType": "YulIdentifier",
																			"src": "480:2:3"
																		},
																		"nativeSrc": "480:35:3",
																		"nodeType": "YulFunctionCall",
																		"src": "480:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "473:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "473:6:3"
																},
																"nativeSrc": "473:43:3",
																"nodeType": "YulFunctionCall",
																"src": "473:43:3"
															},
															"nativeSrc": "470:63:3",
															"nodeType": "YulIf",
															"src": "470:63:3"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "417:122:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "453:5:3",
														"nodeType": "YulTypedName",
														"src": "453:5:3",
														"type": ""
													}
												],
												"src": "417:122:3"
											},
											{
												"body": {
													"nativeSrc": "597:87:3",
													"nodeType": "YulBlock",
													"src": "597:87:3",
													"statements": [
														{
															"nativeSrc": "607:29:3",
															"nodeType": "YulAssignment",
															"src": "607:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "629:6:3",
																		"nodeType": "YulIdentifier",
																		"src": "629:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "616:12:3",
																	"nodeType": "YulIdentifier",
																	"src": "616:12:3"
																},
																"nativeSrc": "616:20:3",
																"nodeType": "YulFunctionCall",
																"src": "616:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "607:5:3",
																	"nodeType": "YulIdentifier",
																	"src": "607:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "672:5:3",
																		"nodeType": "YulIdentifier",
																		"src": "672:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "645:26:3",
																	"nodeType": "YulIdentifier",
																	"src": "645:26:3"
																},
																"nativeSrc": "645:33:3",
																"nodeType": "YulFunctionCall",
																"src": "645:33:3"
															},
															"nativeSrc": "645:33:3",
															"nodeType": "YulExpressionStatement",
															"src": "645:33:3"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "545:139:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "575:6:3",
														"nodeType": "YulTypedName",
														"src": "575:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "583:3:3",
														"nodeType": "YulTypedName",
														"src": "583:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "591:5:3",
														"nodeType": "YulTypedName",
														"src": "591:5:3",
														"type": ""
													}
												],
												"src": "545:139:3"
											},
											{
												"body": {
													"nativeSrc": "735:81:3",
													"nodeType": "YulBlock",
													"src": "735:81:3",
													"statements": [
														{
															"nativeSrc": "745:65:3",
															"nodeType": "YulAssignment",
															"src": "745:65:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "760:5:3",
																		"nodeType": "YulIdentifier",
																		"src": "760:5:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "767:42:3",
																		"nodeType": "YulLiteral",
																		"src": "767:42:3",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "756:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "756:3:3"
																},
																"nativeSrc": "756:54:3",
																"nodeType": "YulFunctionCall",
																"src": "756:54:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "745:7:3",
																	"nodeType": "YulIdentifier",
																	"src": "745:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "690:126:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "717:5:3",
														"nodeType": "YulTypedName",
														"src": "717:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "727:7:3",
														"nodeType": "YulTypedName",
														"src": "727:7:3",
														"type": ""
													}
												],
												"src": "690:126:3"
											},
											{
												"body": {
													"nativeSrc": "867:51:3",
													"nodeType": "YulBlock",
													"src": "867:51:3",
													"statements": [
														{
															"nativeSrc": "877:35:3",
															"nodeType": "YulAssignment",
															"src": "877:35:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "906:5:3",
																		"nodeType": "YulIdentifier",
																		"src": "906:5:3"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "888:17:3",
																	"nodeType": "YulIdentifier",
																	"src": "888:17:3"
																},
																"nativeSrc": "888:24:3",
																"nodeType": "YulFunctionCall",
																"src": "888:24:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "877:7:3",
																	"nodeType": "YulIdentifier",
																	"src": "877:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "822:96:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "849:5:3",
														"nodeType": "YulTypedName",
														"src": "849:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "859:7:3",
														"nodeType": "YulTypedName",
														"src": "859:7:3",
														"type": ""
													}
												],
												"src": "822:96:3"
											},
											{
												"body": {
													"nativeSrc": "967:79:3",
													"nodeType": "YulBlock",
													"src": "967:79:3",
													"statements": [
														{
															"body": {
																"nativeSrc": "1024:16:3",
																"nodeType": "YulBlock",
																"src": "1024:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1033:1:3",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1036:1:3",
																					"nodeType": "YulLiteral",
																					"src": "1036:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1026:6:3",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:3"
																			},
																			"nativeSrc": "1026:12:3",
																			"nodeType": "YulFunctionCall",
																			"src": "1026:12:3"
																		},
																		"nativeSrc": "1026:12:3",
																		"nodeType": "YulExpressionStatement",
																		"src": "1026:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "990:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "990:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1015:5:3",
																						"nodeType": "YulIdentifier",
																						"src": "1015:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "997:17:3",
																					"nodeType": "YulIdentifier",
																					"src": "997:17:3"
																				},
																				"nativeSrc": "997:24:3",
																				"nodeType": "YulFunctionCall",
																				"src": "997:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "987:2:3",
																			"nodeType": "YulIdentifier",
																			"src": "987:2:3"
																		},
																		"nativeSrc": "987:35:3",
																		"nodeType": "YulFunctionCall",
																		"src": "987:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "980:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "980:6:3"
																},
																"nativeSrc": "980:43:3",
																"nodeType": "YulFunctionCall",
																"src": "980:43:3"
															},
															"nativeSrc": "977:63:3",
															"nodeType": "YulIf",
															"src": "977:63:3"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "924:122:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "960:5:3",
														"nodeType": "YulTypedName",
														"src": "960:5:3",
														"type": ""
													}
												],
												"src": "924:122:3"
											},
											{
												"body": {
													"nativeSrc": "1104:87:3",
													"nodeType": "YulBlock",
													"src": "1104:87:3",
													"statements": [
														{
															"nativeSrc": "1114:29:3",
															"nodeType": "YulAssignment",
															"src": "1114:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1136:6:3",
																		"nodeType": "YulIdentifier",
																		"src": "1136:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1123:12:3",
																	"nodeType": "YulIdentifier",
																	"src": "1123:12:3"
																},
																"nativeSrc": "1123:20:3",
																"nodeType": "YulFunctionCall",
																"src": "1123:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1114:5:3",
																	"nodeType": "YulIdentifier",
																	"src": "1114:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1179:5:3",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "1152:26:3",
																	"nodeType": "YulIdentifier",
																	"src": "1152:26:3"
																},
																"nativeSrc": "1152:33:3",
																"nodeType": "YulFunctionCall",
																"src": "1152:33:3"
															},
															"nativeSrc": "1152:33:3",
															"nodeType": "YulExpressionStatement",
															"src": "1152:33:3"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "1052:139:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1082:6:3",
														"nodeType": "YulTypedName",
														"src": "1082:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1090:3:3",
														"nodeType": "YulTypedName",
														"src": "1090:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1098:5:3",
														"nodeType": "YulTypedName",
														"src": "1098:5:3",
														"type": ""
													}
												],
												"src": "1052:139:3"
											},
											{
												"body": {
													"nativeSrc": "1280:391:3",
													"nodeType": "YulBlock",
													"src": "1280:391:3",
													"statements": [
														{
															"body": {
																"nativeSrc": "1326:83:3",
																"nodeType": "YulBlock",
																"src": "1326:83:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "1328:77:3",
																				"nodeType": "YulIdentifier",
																				"src": "1328:77:3"
																			},
																			"nativeSrc": "1328:79:3",
																			"nodeType": "YulFunctionCall",
																			"src": "1328:79:3"
																		},
																		"nativeSrc": "1328:79:3",
																		"nodeType": "YulExpressionStatement",
																		"src": "1328:79:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1301:7:3",
																				"nodeType": "YulIdentifier",
																				"src": "1301:7:3"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1310:9:3",
																				"nodeType": "YulIdentifier",
																				"src": "1310:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1297:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "1297:3:3"
																		},
																		"nativeSrc": "1297:23:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1297:23:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1322:2:3",
																		"nodeType": "YulLiteral",
																		"src": "1322:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1293:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "1293:3:3"
																},
																"nativeSrc": "1293:32:3",
																"nodeType": "YulFunctionCall",
																"src": "1293:32:3"
															},
															"nativeSrc": "1290:119:3",
															"nodeType": "YulIf",
															"src": "1290:119:3"
														},
														{
															"nativeSrc": "1419:117:3",
															"nodeType": "YulBlock",
															"src": "1419:117:3",
															"statements": [
																{
																	"nativeSrc": "1434:15:3",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1434:15:3",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1448:1:3",
																		"nodeType": "YulLiteral",
																		"src": "1448:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1438:6:3",
																			"nodeType": "YulTypedName",
																			"src": "1438:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1463:63:3",
																	"nodeType": "YulAssignment",
																	"src": "1463:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1498:9:3",
																						"nodeType": "YulIdentifier",
																						"src": "1498:9:3"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1509:6:3",
																						"nodeType": "YulIdentifier",
																						"src": "1509:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1494:3:3",
																					"nodeType": "YulIdentifier",
																					"src": "1494:3:3"
																				},
																				"nativeSrc": "1494:22:3",
																				"nodeType": "YulFunctionCall",
																				"src": "1494:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1518:7:3",
																				"nodeType": "YulIdentifier",
																				"src": "1518:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "1473:20:3",
																			"nodeType": "YulIdentifier",
																			"src": "1473:20:3"
																		},
																		"nativeSrc": "1473:53:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1473:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1463:6:3",
																			"nodeType": "YulIdentifier",
																			"src": "1463:6:3"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "1546:118:3",
															"nodeType": "YulBlock",
															"src": "1546:118:3",
															"statements": [
																{
																	"nativeSrc": "1561:16:3",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1561:16:3",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1575:2:3",
																		"nodeType": "YulLiteral",
																		"src": "1575:2:3",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1565:6:3",
																			"nodeType": "YulTypedName",
																			"src": "1565:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1591:63:3",
																	"nodeType": "YulAssignment",
																	"src": "1591:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1626:9:3",
																						"nodeType": "YulIdentifier",
																						"src": "1626:9:3"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1637:6:3",
																						"nodeType": "YulIdentifier",
																						"src": "1637:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1622:3:3",
																					"nodeType": "YulIdentifier",
																					"src": "1622:3:3"
																				},
																				"nativeSrc": "1622:22:3",
																				"nodeType": "YulFunctionCall",
																				"src": "1622:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1646:7:3",
																				"nodeType": "YulIdentifier",
																				"src": "1646:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "1601:20:3",
																			"nodeType": "YulIdentifier",
																			"src": "1601:20:3"
																		},
																		"nativeSrc": "1601:53:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1601:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "1591:6:3",
																			"nodeType": "YulIdentifier",
																			"src": "1591:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nativeSrc": "1197:474:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1242:9:3",
														"nodeType": "YulTypedName",
														"src": "1242:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1253:7:3",
														"nodeType": "YulTypedName",
														"src": "1253:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1265:6:3",
														"nodeType": "YulTypedName",
														"src": "1265:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1273:6:3",
														"nodeType": "YulTypedName",
														"src": "1273:6:3",
														"type": ""
													}
												],
												"src": "1197:474:3"
											},
											{
												"body": {
													"nativeSrc": "1719:48:3",
													"nodeType": "YulBlock",
													"src": "1719:48:3",
													"statements": [
														{
															"nativeSrc": "1729:32:3",
															"nodeType": "YulAssignment",
															"src": "1729:32:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1754:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "1754:5:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1747:6:3",
																			"nodeType": "YulIdentifier",
																			"src": "1747:6:3"
																		},
																		"nativeSrc": "1747:13:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1747:13:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1740:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "1740:6:3"
																},
																"nativeSrc": "1740:21:3",
																"nodeType": "YulFunctionCall",
																"src": "1740:21:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1729:7:3",
																	"nodeType": "YulIdentifier",
																	"src": "1729:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "1677:90:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1701:5:3",
														"nodeType": "YulTypedName",
														"src": "1701:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1711:7:3",
														"nodeType": "YulTypedName",
														"src": "1711:7:3",
														"type": ""
													}
												],
												"src": "1677:90:3"
											},
											{
												"body": {
													"nativeSrc": "1832:50:3",
													"nodeType": "YulBlock",
													"src": "1832:50:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1849:3:3",
																		"nodeType": "YulIdentifier",
																		"src": "1849:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1869:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "1869:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "1854:14:3",
																			"nodeType": "YulIdentifier",
																			"src": "1854:14:3"
																		},
																		"nativeSrc": "1854:21:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1854:21:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1842:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "1842:6:3"
																},
																"nativeSrc": "1842:34:3",
																"nodeType": "YulFunctionCall",
																"src": "1842:34:3"
															},
															"nativeSrc": "1842:34:3",
															"nodeType": "YulExpressionStatement",
															"src": "1842:34:3"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "1773:109:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1820:5:3",
														"nodeType": "YulTypedName",
														"src": "1820:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "1827:3:3",
														"nodeType": "YulTypedName",
														"src": "1827:3:3",
														"type": ""
													}
												],
												"src": "1773:109:3"
											},
											{
												"body": {
													"nativeSrc": "1980:118:3",
													"nodeType": "YulBlock",
													"src": "1980:118:3",
													"statements": [
														{
															"nativeSrc": "1990:26:3",
															"nodeType": "YulAssignment",
															"src": "1990:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2002:9:3",
																		"nodeType": "YulIdentifier",
																		"src": "2002:9:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2013:2:3",
																		"nodeType": "YulLiteral",
																		"src": "2013:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1998:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "1998:3:3"
																},
																"nativeSrc": "1998:18:3",
																"nodeType": "YulFunctionCall",
																"src": "1998:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1990:4:3",
																	"nodeType": "YulIdentifier",
																	"src": "1990:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "2064:6:3",
																		"nodeType": "YulIdentifier",
																		"src": "2064:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2077:9:3",
																				"nodeType": "YulIdentifier",
																				"src": "2077:9:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2088:1:3",
																				"nodeType": "YulLiteral",
																				"src": "2088:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2073:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "2073:3:3"
																		},
																		"nativeSrc": "2073:17:3",
																		"nodeType": "YulFunctionCall",
																		"src": "2073:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "2026:37:3",
																	"nodeType": "YulIdentifier",
																	"src": "2026:37:3"
																},
																"nativeSrc": "2026:65:3",
																"nodeType": "YulFunctionCall",
																"src": "2026:65:3"
															},
															"nativeSrc": "2026:65:3",
															"nodeType": "YulExpressionStatement",
															"src": "2026:65:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1888:210:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1952:9:3",
														"nodeType": "YulTypedName",
														"src": "1952:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1964:6:3",
														"nodeType": "YulTypedName",
														"src": "1964:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1975:4:3",
														"nodeType": "YulTypedName",
														"src": "1975:4:3",
														"type": ""
													}
												],
												"src": "1888:210:3"
											},
											{
												"body": {
													"nativeSrc": "2170:263:3",
													"nodeType": "YulBlock",
													"src": "2170:263:3",
													"statements": [
														{
															"body": {
																"nativeSrc": "2216:83:3",
																"nodeType": "YulBlock",
																"src": "2216:83:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2218:77:3",
																				"nodeType": "YulIdentifier",
																				"src": "2218:77:3"
																			},
																			"nativeSrc": "2218:79:3",
																			"nodeType": "YulFunctionCall",
																			"src": "2218:79:3"
																		},
																		"nativeSrc": "2218:79:3",
																		"nodeType": "YulExpressionStatement",
																		"src": "2218:79:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2191:7:3",
																				"nodeType": "YulIdentifier",
																				"src": "2191:7:3"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2200:9:3",
																				"nodeType": "YulIdentifier",
																				"src": "2200:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2187:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "2187:3:3"
																		},
																		"nativeSrc": "2187:23:3",
																		"nodeType": "YulFunctionCall",
																		"src": "2187:23:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2212:2:3",
																		"nodeType": "YulLiteral",
																		"src": "2212:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2183:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "2183:3:3"
																},
																"nativeSrc": "2183:32:3",
																"nodeType": "YulFunctionCall",
																"src": "2183:32:3"
															},
															"nativeSrc": "2180:119:3",
															"nodeType": "YulIf",
															"src": "2180:119:3"
														},
														{
															"nativeSrc": "2309:117:3",
															"nodeType": "YulBlock",
															"src": "2309:117:3",
															"statements": [
																{
																	"nativeSrc": "2324:15:3",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2324:15:3",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2338:1:3",
																		"nodeType": "YulLiteral",
																		"src": "2338:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2328:6:3",
																			"nodeType": "YulTypedName",
																			"src": "2328:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2353:63:3",
																	"nodeType": "YulAssignment",
																	"src": "2353:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2388:9:3",
																						"nodeType": "YulIdentifier",
																						"src": "2388:9:3"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2399:6:3",
																						"nodeType": "YulIdentifier",
																						"src": "2399:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2384:3:3",
																					"nodeType": "YulIdentifier",
																					"src": "2384:3:3"
																				},
																				"nativeSrc": "2384:22:3",
																				"nodeType": "YulFunctionCall",
																				"src": "2384:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2408:7:3",
																				"nodeType": "YulIdentifier",
																				"src": "2408:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2363:20:3",
																			"nodeType": "YulIdentifier",
																			"src": "2363:20:3"
																		},
																		"nativeSrc": "2363:53:3",
																		"nodeType": "YulFunctionCall",
																		"src": "2363:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2353:6:3",
																			"nodeType": "YulIdentifier",
																			"src": "2353:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2104:329:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2140:9:3",
														"nodeType": "YulTypedName",
														"src": "2140:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2151:7:3",
														"nodeType": "YulTypedName",
														"src": "2151:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2163:6:3",
														"nodeType": "YulTypedName",
														"src": "2163:6:3",
														"type": ""
													}
												],
												"src": "2104:329:3"
											},
											{
												"body": {
													"nativeSrc": "2504:53:3",
													"nodeType": "YulBlock",
													"src": "2504:53:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "2521:3:3",
																		"nodeType": "YulIdentifier",
																		"src": "2521:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2544:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "2544:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "2526:17:3",
																			"nodeType": "YulIdentifier",
																			"src": "2526:17:3"
																		},
																		"nativeSrc": "2526:24:3",
																		"nodeType": "YulFunctionCall",
																		"src": "2526:24:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2514:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "2514:6:3"
																},
																"nativeSrc": "2514:37:3",
																"nodeType": "YulFunctionCall",
																"src": "2514:37:3"
															},
															"nativeSrc": "2514:37:3",
															"nodeType": "YulExpressionStatement",
															"src": "2514:37:3"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "2439:118:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2492:5:3",
														"nodeType": "YulTypedName",
														"src": "2492:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "2499:3:3",
														"nodeType": "YulTypedName",
														"src": "2499:3:3",
														"type": ""
													}
												],
												"src": "2439:118:3"
											},
											{
												"body": {
													"nativeSrc": "2661:124:3",
													"nodeType": "YulBlock",
													"src": "2661:124:3",
													"statements": [
														{
															"nativeSrc": "2671:26:3",
															"nodeType": "YulAssignment",
															"src": "2671:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2683:9:3",
																		"nodeType": "YulIdentifier",
																		"src": "2683:9:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2694:2:3",
																		"nodeType": "YulLiteral",
																		"src": "2694:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2679:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "2679:3:3"
																},
																"nativeSrc": "2679:18:3",
																"nodeType": "YulFunctionCall",
																"src": "2679:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2671:4:3",
																	"nodeType": "YulIdentifier",
																	"src": "2671:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "2751:6:3",
																		"nodeType": "YulIdentifier",
																		"src": "2751:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2764:9:3",
																				"nodeType": "YulIdentifier",
																				"src": "2764:9:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2775:1:3",
																				"nodeType": "YulLiteral",
																				"src": "2775:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2760:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "2760:3:3"
																		},
																		"nativeSrc": "2760:17:3",
																		"nodeType": "YulFunctionCall",
																		"src": "2760:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "2707:43:3",
																	"nodeType": "YulIdentifier",
																	"src": "2707:43:3"
																},
																"nativeSrc": "2707:71:3",
																"nodeType": "YulFunctionCall",
																"src": "2707:71:3"
															},
															"nativeSrc": "2707:71:3",
															"nodeType": "YulExpressionStatement",
															"src": "2707:71:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2563:222:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2633:9:3",
														"nodeType": "YulTypedName",
														"src": "2633:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2645:6:3",
														"nodeType": "YulTypedName",
														"src": "2645:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2656:4:3",
														"nodeType": "YulTypedName",
														"src": "2656:4:3",
														"type": ""
													}
												],
												"src": "2563:222:3"
											},
											{
												"body": {
													"nativeSrc": "2856:53:3",
													"nodeType": "YulBlock",
													"src": "2856:53:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "2873:3:3",
																		"nodeType": "YulIdentifier",
																		"src": "2873:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2896:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "2896:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "2878:17:3",
																			"nodeType": "YulIdentifier",
																			"src": "2878:17:3"
																		},
																		"nativeSrc": "2878:24:3",
																		"nodeType": "YulFunctionCall",
																		"src": "2878:24:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2866:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "2866:6:3"
																},
																"nativeSrc": "2866:37:3",
																"nodeType": "YulFunctionCall",
																"src": "2866:37:3"
															},
															"nativeSrc": "2866:37:3",
															"nodeType": "YulExpressionStatement",
															"src": "2866:37:3"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "2791:118:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2844:5:3",
														"nodeType": "YulTypedName",
														"src": "2844:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "2851:3:3",
														"nodeType": "YulTypedName",
														"src": "2851:3:3",
														"type": ""
													}
												],
												"src": "2791:118:3"
											},
											{
												"body": {
													"nativeSrc": "3041:206:3",
													"nodeType": "YulBlock",
													"src": "3041:206:3",
													"statements": [
														{
															"nativeSrc": "3051:26:3",
															"nodeType": "YulAssignment",
															"src": "3051:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3063:9:3",
																		"nodeType": "YulIdentifier",
																		"src": "3063:9:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3074:2:3",
																		"nodeType": "YulLiteral",
																		"src": "3074:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3059:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "3059:3:3"
																},
																"nativeSrc": "3059:18:3",
																"nodeType": "YulFunctionCall",
																"src": "3059:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3051:4:3",
																	"nodeType": "YulIdentifier",
																	"src": "3051:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3131:6:3",
																		"nodeType": "YulIdentifier",
																		"src": "3131:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3144:9:3",
																				"nodeType": "YulIdentifier",
																				"src": "3144:9:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3155:1:3",
																				"nodeType": "YulLiteral",
																				"src": "3155:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3140:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "3140:3:3"
																		},
																		"nativeSrc": "3140:17:3",
																		"nodeType": "YulFunctionCall",
																		"src": "3140:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "3087:43:3",
																	"nodeType": "YulIdentifier",
																	"src": "3087:43:3"
																},
																"nativeSrc": "3087:71:3",
																"nodeType": "YulFunctionCall",
																"src": "3087:71:3"
															},
															"nativeSrc": "3087:71:3",
															"nodeType": "YulExpressionStatement",
															"src": "3087:71:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "3212:6:3",
																		"nodeType": "YulIdentifier",
																		"src": "3212:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3225:9:3",
																				"nodeType": "YulIdentifier",
																				"src": "3225:9:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3236:2:3",
																				"nodeType": "YulLiteral",
																				"src": "3236:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3221:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "3221:3:3"
																		},
																		"nativeSrc": "3221:18:3",
																		"nodeType": "YulFunctionCall",
																		"src": "3221:18:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "3168:43:3",
																	"nodeType": "YulIdentifier",
																	"src": "3168:43:3"
																},
																"nativeSrc": "3168:72:3",
																"nodeType": "YulFunctionCall",
																"src": "3168:72:3"
															},
															"nativeSrc": "3168:72:3",
															"nodeType": "YulExpressionStatement",
															"src": "3168:72:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "2915:332:3",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3005:9:3",
														"nodeType": "YulTypedName",
														"src": "3005:9:3",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3017:6:3",
														"nodeType": "YulTypedName",
														"src": "3017:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3025:6:3",
														"nodeType": "YulTypedName",
														"src": "3025:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3036:4:3",
														"nodeType": "YulTypedName",
														"src": "3036:4:3",
														"type": ""
													}
												],
												"src": "2915:332:3"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506004361061003f575f3560e01c80639ac016e214610043578063be1f23c014610073578063f5a940341461007d575b5f80fd5b61005d60048036038101906100589190610296565b6100ad565b60405161006a91906102ee565b60405180910390f35b61007b610115565b005b61009760048036038101906100929190610307565b6101b5565b6040516100a49190610341565b60405180910390f35b5f8173ffffffffffffffffffffffffffffffffffffffff1660015f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b61011e5f6101e5565b5f6101285f6101f9565b90503360015f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd8aeb6b9f86d6e27269b062abae340b8aa70766460b785b655e5653f1485f4c081336040516101aa929190610369565b60405180910390a150565b6001602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001815f015f828254019250508190555050565b5f815f01549050919050565b5f80fd5b5f819050919050565b61021b81610209565b8114610225575f80fd5b50565b5f8135905061023681610212565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102658261023c565b9050919050565b6102758161025b565b811461027f575f80fd5b50565b5f813590506102908161026c565b92915050565b5f80604083850312156102ac576102ab610205565b5b5f6102b985828601610228565b92505060206102ca85828601610282565b9150509250929050565b5f8115159050919050565b6102e8816102d4565b82525050565b5f6020820190506103015f8301846102df565b92915050565b5f6020828403121561031c5761031b610205565b5b5f61032984828501610228565b91505092915050565b61033b8161025b565b82525050565b5f6020820190506103545f830184610332565b92915050565b61036381610209565b82525050565b5f60408201905061037c5f83018561035a565b6103896020830184610332565b939250505056fea2646970667358221220e848c59e51b03a3396a2b83d979eaa6f193ba57c0310c22e272d079dc112bd6f64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9AC016E2 EQ PUSH2 0x43 JUMPI DUP1 PUSH4 0xBE1F23C0 EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0xF5A94034 EQ PUSH2 0x7D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x5D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x58 SWAP2 SWAP1 PUSH2 0x296 JUMP JUMPDEST PUSH2 0xAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6A SWAP2 SWAP1 PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7B PUSH2 0x115 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x97 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x92 SWAP2 SWAP1 PUSH2 0x307 JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA4 SWAP2 SWAP1 PUSH2 0x341 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11E PUSH0 PUSH2 0x1E5 JUMP JUMPDEST PUSH0 PUSH2 0x128 PUSH0 PUSH2 0x1F9 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xD8AEB6B9F86D6E27269B062ABAE340B8AA70766460B785B655E5653F1485F4C0 DUP2 CALLER PUSH1 0x40 MLOAD PUSH2 0x1AA SWAP3 SWAP2 SWAP1 PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH0 ADD PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21B DUP2 PUSH2 0x209 JUMP JUMPDEST DUP2 EQ PUSH2 0x225 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x236 DUP2 PUSH2 0x212 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x265 DUP3 PUSH2 0x23C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x275 DUP2 PUSH2 0x25B JUMP JUMPDEST DUP2 EQ PUSH2 0x27F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x290 DUP2 PUSH2 0x26C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AC JUMPI PUSH2 0x2AB PUSH2 0x205 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2B9 DUP6 DUP3 DUP7 ADD PUSH2 0x228 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2CA DUP6 DUP3 DUP7 ADD PUSH2 0x282 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E8 DUP2 PUSH2 0x2D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x301 PUSH0 DUP4 ADD DUP5 PUSH2 0x2DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31C JUMPI PUSH2 0x31B PUSH2 0x205 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x329 DUP5 DUP3 DUP6 ADD PUSH2 0x228 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x33B DUP2 PUSH2 0x25B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x354 PUSH0 DUP4 ADD DUP5 PUSH2 0x332 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x363 DUP2 PUSH2 0x209 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x37C PUSH0 DUP4 ADD DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH2 0x389 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x332 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 BASEFEE 0xC5 SWAP15 MLOAD 0xB0 GASPRICE CALLER SWAP7 LOG2 0xB8 RETURNDATASIZE SWAP8 SWAP15 0xAA PUSH16 0x193BA57C0310C22E272D079DC112BD6F PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "378:869:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1103:142;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;798:227;;;:::i;:::-;;534:49;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1103:142;1180:4;1234;1203:35;;:14;:27;1218:11;1203:27;;;;;;;;;;;;;;;;;;;;;:35;;;1196:42;;1103:142;;;;:::o;798:227::-;844:27;:15;:25;:27::i;:::-;881:13;897:25;:15;:23;:25::i;:::-;881:41;;956:10;932:14;:21;947:5;932:21;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;981:37;1000:5;1007:10;981:37;;;;;;;:::i;:::-;;;;;;;;834:191;798:227::o;534:49::-;;;;;;;;;;;;;;;;;;;;;;:::o;945:123:0:-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;827:112::-;892:7;918;:14;;;911:21;;827:112;;;:::o;88:117:3:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:126::-;727:7;767:42;760:5;756:54;745:65;;690:126;;;:::o;822:96::-;859:7;888:24;906:5;888:24;:::i;:::-;877:35;;822:96;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:90::-;1711:7;1754:5;1747:13;1740:21;1729:32;;1677:90;;;:::o;1773:109::-;1854:21;1869:5;1854:21;:::i;:::-;1849:3;1842:34;1773:109;;:::o;1888:210::-;1975:4;2013:2;2002:9;1998:18;1990:26;;2026:65;2088:1;2077:9;2073:17;2064:6;2026:65;:::i;:::-;1888:210;;;;:::o;2104:329::-;2163:6;2212:2;2200:9;2191:7;2187:23;2183:32;2180:119;;;2218:79;;:::i;:::-;2180:119;2338:1;2363:53;2408:7;2399:6;2388:9;2384:22;2363:53;:::i;:::-;2353:63;;2309:117;2104:329;;;;:::o;2439:118::-;2526:24;2544:5;2526:24;:::i;:::-;2521:3;2514:37;2439:118;;:::o;2563:222::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2707:71;2775:1;2764:9;2760:17;2751:6;2707:71;:::i;:::-;2563:222;;;;:::o;2791:118::-;2878:24;2896:5;2878:24;:::i;:::-;2873:3;2866:37;2791:118;;:::o;2915:332::-;3036:4;3074:2;3063:9;3059:18;3051:26;;3087:71;3155:1;3144:9;3140:17;3131:6;3087:71;:::i;:::-;3168:72;3236:2;3225:9;3221:18;3212:6;3168:72;:::i;:::-;2915:332;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "193200",
								"executionCost": "236",
								"totalCost": "193436"
							},
							"external": {
								"createEphemeral()": "52500",
								"ephemeralOwner(uint256)": "2849",
								"isOwnerOf(uint256,address)": "3025"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 378,
									"end": 1247,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e848c59e51b03a3396a2b83d979eaa6f193ba57c0310c22e272d079dc112bd6f64736f6c634300081a0033",
									".code": [
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "9AC016E2"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "BE1F23C0"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "F5A94034"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 378,
											"end": 1247,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1103,
											"end": 1245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1103,
											"end": 1245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1103,
											"end": 1245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 798,
											"end": 1025,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 534,
											"end": 583,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 534,
											"end": 583,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 534,
											"end": 583,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1180,
											"end": 1184,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1238,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1238,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1203,
											"end": 1238,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1217,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1218,
											"end": 1229,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1203,
											"end": 1230,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1238,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1203,
											"end": 1238,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1203,
											"end": 1238,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1196,
											"end": 1238,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1196,
											"end": 1238,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1245,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 798,
											"end": 1025,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 844,
											"end": 871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 844,
											"end": 859,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 844,
											"end": 869,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 844,
											"end": 871,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 844,
											"end": 871,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 844,
											"end": 871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 881,
											"end": 894,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 897,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 897,
											"end": 912,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 897,
											"end": 920,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 897,
											"end": 922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 897,
											"end": 922,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 897,
											"end": 922,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 881,
											"end": 922,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 881,
											"end": 922,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 956,
											"end": 966,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 932,
											"end": 946,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 932,
											"end": 953,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 947,
											"end": 952,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 932,
											"end": 953,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 932,
											"end": 953,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 932,
											"end": 953,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 932,
											"end": 953,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 932,
											"end": 966,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 932,
											"end": 966,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 932,
											"end": 966,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 932,
											"end": 966,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 932,
											"end": 966,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "PUSH",
											"source": 2,
											"value": "D8AEB6B9F86D6E27269B062ABAE340B8AA70766460B785B655E5653F1485F4C0"
										},
										{
											"begin": 1000,
											"end": 1005,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1007,
											"end": 1017,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 981,
											"end": 1018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 981,
											"end": 1018,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 834,
											"end": 1025,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 798,
											"end": 1025,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 534,
											"end": 583,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 534,
											"end": 583,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 945,
											"end": 1068,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 945,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1050,
											"end": 1051,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1032,
											"end": 1039,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1046,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1032,
											"end": 1046,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1046,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 945,
											"end": 1068,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 945,
											"end": 1068,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 827,
											"end": 939,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 827,
											"end": 939,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 892,
											"end": 899,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 918,
											"end": 925,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 918,
											"end": 932,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 918,
											"end": 932,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 911,
											"end": 932,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 911,
											"end": 932,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 827,
											"end": 939,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 827,
											"end": 939,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 827,
											"end": 939,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 827,
											"end": 939,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 334,
											"end": 411,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 334,
											"end": 411,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 400,
											"end": 405,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 389,
											"end": 405,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 389,
											"end": 405,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 334,
											"end": 411,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 334,
											"end": 411,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 334,
											"end": 411,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 334,
											"end": 411,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 417,
											"end": 539,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 417,
											"end": 539,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 490,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 490,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 490,
											"end": 514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 490,
											"end": 514,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 490,
											"end": 514,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 483,
											"end": 488,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 480,
											"end": 515,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 470,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 470,
											"end": 533,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 529,
											"end": 530,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 526,
											"end": 527,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 519,
											"end": 531,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 470,
											"end": 533,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 470,
											"end": 533,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 417,
											"end": 539,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 417,
											"end": 539,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 545,
											"end": 684,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 545,
											"end": 684,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 591,
											"end": 596,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 629,
											"end": 635,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 616,
											"end": 636,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 607,
											"end": 636,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 607,
											"end": 636,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 645,
											"end": 678,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 645,
											"end": 678,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 645,
											"end": 678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 645,
											"end": 678,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 645,
											"end": 678,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 545,
											"end": 684,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 545,
											"end": 684,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 545,
											"end": 684,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 545,
											"end": 684,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 545,
											"end": 684,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 690,
											"end": 816,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 690,
											"end": 816,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 727,
											"end": 734,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 767,
											"end": 809,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 760,
											"end": 765,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 756,
											"end": 810,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 745,
											"end": 810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 745,
											"end": 810,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 690,
											"end": 816,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 690,
											"end": 816,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 690,
											"end": 816,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 690,
											"end": 816,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 822,
											"end": 918,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 822,
											"end": 918,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 859,
											"end": 866,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 888,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 906,
											"end": 911,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 888,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 888,
											"end": 912,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 888,
											"end": 912,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 888,
											"end": 912,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 877,
											"end": 912,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 877,
											"end": 912,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 822,
											"end": 918,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 822,
											"end": 918,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 822,
											"end": 918,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 822,
											"end": 918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1015,
											"end": 1020,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 997,
											"end": 1021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 990,
											"end": 995,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 987,
											"end": 1022,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1026,
											"end": 1038,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 924,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1098,
											"end": 1103,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 1152,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "tag",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1322,
											"end": 1324,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1310,
											"end": 1319,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1301,
											"end": 1308,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1293,
											"end": 1325,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 1328,
											"end": 1407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "tag",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1448,
											"end": 1449,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1509,
											"end": 1515,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1494,
											"end": 1516,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 1473,
											"end": 1526,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1419,
											"end": 1536,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1575,
											"end": 1577,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1646,
											"end": 1653,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1637,
											"end": 1643,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1626,
											"end": 1635,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1622,
											"end": 1644,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 1601,
											"end": 1654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1546,
											"end": 1664,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1767,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1677,
											"end": 1767,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1711,
											"end": 1718,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1747,
											"end": 1760,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1740,
											"end": 1761,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1729,
											"end": 1761,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1729,
											"end": 1761,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1767,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1767,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1767,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1767,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1773,
											"end": 1882,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 1773,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1854,
											"end": 1875,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 1869,
											"end": 1874,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1854,
											"end": 1875,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1854,
											"end": 1875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1854,
											"end": 1875,
											"name": "tag",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 1854,
											"end": 1875,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1849,
											"end": 1852,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1842,
											"end": 1876,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1773,
											"end": 1882,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1773,
											"end": 1882,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1773,
											"end": 1882,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1888,
											"end": 2098,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1888,
											"end": 2098,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1975,
											"end": 1979,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2013,
											"end": 2015,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2002,
											"end": 2011,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1998,
											"end": 2016,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1990,
											"end": 2016,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1990,
											"end": 2016,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2026,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 2088,
											"end": 2089,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2077,
											"end": 2086,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2073,
											"end": 2090,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2064,
											"end": 2070,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2026,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2026,
											"end": 2091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2026,
											"end": 2091,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 2026,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1888,
											"end": 2098,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1888,
											"end": 2098,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1888,
											"end": 2098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1888,
											"end": 2098,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1888,
											"end": 2098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2104,
											"end": 2433,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 2104,
											"end": 2433,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2163,
											"end": 2169,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2212,
											"end": 2214,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2200,
											"end": 2209,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2191,
											"end": 2198,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2187,
											"end": 2210,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2183,
											"end": 2215,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 2180,
											"end": 2299,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2180,
											"end": 2299,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 2180,
											"end": 2299,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2218,
											"end": 2297,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 2218,
											"end": 2297,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 2218,
											"end": 2297,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2218,
											"end": 2297,
											"name": "tag",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 2218,
											"end": 2297,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2180,
											"end": 2299,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 2180,
											"end": 2299,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2338,
											"end": 2339,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2363,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 2408,
											"end": 2415,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2399,
											"end": 2405,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2388,
											"end": 2397,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2384,
											"end": 2406,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 2363,
											"end": 2416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2416,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 2363,
											"end": 2416,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2353,
											"end": 2416,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2353,
											"end": 2416,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2309,
											"end": 2426,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2104,
											"end": 2433,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2104,
											"end": 2433,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2104,
											"end": 2433,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2104,
											"end": 2433,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2104,
											"end": 2433,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2439,
											"end": 2557,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 2439,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2526,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 2544,
											"end": 2549,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2526,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 2526,
											"end": 2550,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2526,
											"end": 2550,
											"name": "tag",
											"source": 3,
											"value": "77"
										},
										{
											"begin": 2526,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2521,
											"end": 2524,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2514,
											"end": 2551,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2439,
											"end": 2557,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2439,
											"end": 2557,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2439,
											"end": 2557,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2563,
											"end": 2785,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 2563,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2656,
											"end": 2660,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2694,
											"end": 2696,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2683,
											"end": 2692,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2679,
											"end": 2697,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2671,
											"end": 2697,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2671,
											"end": 2697,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2707,
											"end": 2778,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2764,
											"end": 2773,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2760,
											"end": 2777,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2751,
											"end": 2757,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2707,
											"end": 2778,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 2707,
											"end": 2778,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2707,
											"end": 2778,
											"name": "tag",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 2707,
											"end": 2778,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2563,
											"end": 2785,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2563,
											"end": 2785,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2563,
											"end": 2785,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2563,
											"end": 2785,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2563,
											"end": 2785,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2791,
											"end": 2909,
											"name": "tag",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 2791,
											"end": 2909,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2878,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 2896,
											"end": 2901,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2878,
											"end": 2902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 2878,
											"end": 2902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2878,
											"end": 2902,
											"name": "tag",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 2878,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2873,
											"end": 2876,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2866,
											"end": 2903,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2791,
											"end": 2909,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2791,
											"end": 2909,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2791,
											"end": 2909,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2915,
											"end": 3247,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 2915,
											"end": 3247,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3036,
											"end": 3040,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3074,
											"end": 3076,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3063,
											"end": 3072,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3059,
											"end": 3077,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3051,
											"end": 3077,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3051,
											"end": 3077,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3087,
											"end": 3158,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 3155,
											"end": 3156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3153,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3140,
											"end": 3157,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3131,
											"end": 3137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3087,
											"end": 3158,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 3087,
											"end": 3158,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3087,
											"end": 3158,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 3087,
											"end": 3158,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3168,
											"end": 3240,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 3236,
											"end": 3238,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3225,
											"end": 3234,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3221,
											"end": 3239,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3212,
											"end": 3218,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3168,
											"end": 3240,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 3168,
											"end": 3240,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3168,
											"end": 3240,
											"name": "tag",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 3168,
											"end": 3240,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2915,
											"end": 3247,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2915,
											"end": 3247,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2915,
											"end": 3247,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2915,
											"end": 3247,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2915,
											"end": 3247,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2915,
											"end": 3247,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/utils/Counters.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"createEphemeral()": "be1f23c0",
							"ephemeralOwner(uint256)": "f5a94034",
							"isOwnerOf(uint256,address)": "9ac016e2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ephemeralID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EphemeralAllocated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createEphemeral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ephemeralOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ephemeralID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createEphemeral()\":{\"details\":\"The contract picks ephemeral IDs sequentially or from VRF, not the user. Minimizes collision/hijack risk.\"},\"isOwnerOf(uint256,address)\":{\"details\":\"Example usage: check ephemeral ID ownership\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"DEFENSE TYPE: A contract that issues ephemeral port-like IDs using a secure incremental or random approach.  Doesn\\u2019t allow user-chosen ephemeral IDs => no collisions or guess attacks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"E/Ephemeral Port/Randomness  Secure ephemeral \\u201cport\\u201d ID.sol\":\"SecureEphemeralPort\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"E/Ephemeral Port/Randomness  Secure ephemeral \\u201cport\\u201d ID.sol\":{\"keccak256\":\"0x1070a6049196a3d22b270387ec22a673fdbaa30962c393bb5574fda397bdc1d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87f85a713359ffbb3aed211937a36e28bccda217e8fa5c49376e67dc7aa907a7\",\"dweb:/ipfs/QmbhQztpH9FahMLTe54fE2ht8La4aUDpVA8miJCfnrmbNY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 433,
								"contract": "E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol:SecureEphemeralPort",
								"label": "_sessionCounter",
								"offset": 0,
								"slot": "0",
								"type": "t_struct(Counter)5_storage"
							},
							{
								"astId": 437,
								"contract": "E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol:SecureEphemeralPort",
								"label": "ephemeralOwner",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_address)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_struct(Counter)5_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 4,
										"contract": "E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol:SecureEphemeralPort",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "DEFENSE TYPE: A contract that issues ephemeral port-like IDs using a secure incremental or random approach.  Doesn’t allow user-chosen ephemeral IDs => no collisions or guess attacks.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/utils/Counters.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							73
						]
					},
					"id": 74,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counters",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:0",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 73,
							"linearizedBaseContracts": [
								73
							],
							"name": "Counters",
							"nameLocation": "432:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 5,
									"members": [
										{
											"constant": false,
											"id": 4,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "794:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 5,
											"src": "786:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "786:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "454:7:0",
									"nodeType": "StructDefinition",
									"scope": 73,
									"src": "447:374:0",
									"visibility": "public"
								},
								{
									"body": {
										"id": 16,
										"nodeType": "Block",
										"src": "901:38:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 13,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "918:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 14,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "926:6:0",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 4,
													"src": "918:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 12,
												"id": 15,
												"nodeType": "Return",
												"src": "911:21:0"
											}
										]
									},
									"id": 17,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "836:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "860:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "844:23:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 7,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 6,
														"name": "Counter",
														"nameLocations": [
															"844:7:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 5,
														"src": "844:7:0"
													},
													"referencedDeclaration": 5,
													"src": "844:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:25:0"
									},
									"returnParameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "892:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:9:0"
									},
									"scope": 73,
									"src": "827:112:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "998:70:0",
										"statements": [
											{
												"id": 29,
												"nodeType": "UncheckedBlock",
												"src": "1008:54:0",
												"statements": [
													{
														"expression": {
															"id": 27,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 23,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 20,
																	"src": "1032:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 25,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1040:6:0",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 4,
																"src": "1032:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 26,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1032:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 28,
														"nodeType": "ExpressionStatement",
														"src": "1032:19:0"
													}
												]
											}
										]
									},
									"id": 31,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "954:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "980:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "964:23:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 19,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 18,
														"name": "Counter",
														"nameLocations": [
															"964:7:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 5,
														"src": "964:7:0"
													},
													"referencedDeclaration": 5,
													"src": "964:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:25:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:0:0"
									},
									"scope": 73,
									"src": "945:123:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 58,
										"nodeType": "Block",
										"src": "1127:176:0",
										"statements": [
											{
												"assignments": [
													38
												],
												"declarations": [
													{
														"constant": false,
														"id": 38,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1145:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 58,
														"src": "1137:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 37,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1137:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 41,
												"initialValue": {
													"expression": {
														"id": 39,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 34,
														"src": "1153:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 40,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1161:6:0",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 4,
													"src": "1153:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1137:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 43,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 38,
																"src": "1185:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 44,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1193:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1185:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 46,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1196:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 42,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1177:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1177:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1177:49:0"
											},
											{
												"id": 57,
												"nodeType": "UncheckedBlock",
												"src": "1236:61:0",
												"statements": [
													{
														"expression": {
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 49,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 34,
																	"src": "1260:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1268:6:0",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 4,
																"src": "1260:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 52,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 38,
																	"src": "1277:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 53,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1285:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1277:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1260:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 56,
														"nodeType": "ExpressionStatement",
														"src": "1260:26:0"
													}
												]
											}
										]
									},
									"id": 59,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1083:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1109:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "1093:23:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 33,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 32,
														"name": "Counter",
														"nameLocations": [
															"1093:7:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 5,
														"src": "1093:7:0"
													},
													"referencedDeclaration": 5,
													"src": "1093:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:25:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:0:0"
									},
									"scope": 73,
									"src": "1074:229:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 71,
										"nodeType": "Block",
										"src": "1358:35:0",
										"statements": [
											{
												"expression": {
													"id": 69,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 65,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 62,
															"src": "1368:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 67,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1376:6:0",
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4,
														"src": "1368:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 68,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1385:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1368:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 70,
												"nodeType": "ExpressionStatement",
												"src": "1368:18:0"
											}
										]
									},
									"id": 72,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1318:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1340:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1324:23:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 61,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 60,
														"name": "Counter",
														"nameLocations": [
															"1324:7:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 5,
														"src": "1324:7:0"
													},
													"referencedDeclaration": 5,
													"src": "1324:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:25:0"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:0:0"
									},
									"scope": 73,
									"src": "1309:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 74,
							"src": "424:971:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "87:1309:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							421
						]
					},
					"id": 422,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 75,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 76,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:1",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 421,
							"linearizedBaseContracts": [
								421
							],
							"name": "ECDSA",
							"nameLocation": "352:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 81,
									"members": [
										{
											"id": 77,
											"name": "NoError",
											"nameLocation": "392:7:1",
											"nodeType": "EnumValue",
											"src": "392:7:1"
										},
										{
											"id": 78,
											"name": "InvalidSignature",
											"nameLocation": "409:16:1",
											"nodeType": "EnumValue",
											"src": "409:16:1"
										},
										{
											"id": 79,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:1",
											"nodeType": "EnumValue",
											"src": "435:22:1"
										},
										{
											"id": 80,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:1",
											"nodeType": "EnumValue",
											"src": "467:17:1"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:1",
									"nodeType": "EnumDefinition",
									"src": "364:126:1"
								},
								{
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:1",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 84,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:1"
									},
									"src": "564:30:1"
								},
								{
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:1",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 89,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "699:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 86,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:1"
									},
									"src": "665:50:1"
								},
								{
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:1",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 94,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "840:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 91,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:1"
									},
									"src": "811:40:1"
								},
								{
									"body": {
										"id": 146,
										"nodeType": "Block",
										"src": "2285:622:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 109,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "2299:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2309:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2299:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 111,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2319:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2299:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 144,
													"nodeType": "Block",
													"src": "2793:108:1",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 133,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2823:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2815:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 131,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2815:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2815:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 135,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 81,
																			"src": "2827:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 136,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2840:22:1",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 79,
																		"src": "2827:35:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$81",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 139,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 99,
																					"src": "2872:9:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 140,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2882:6:1",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2872:16:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 138,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2864:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 137,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2864:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 141,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2864:25:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 142,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2814:76:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 108,
															"id": 143,
															"nodeType": "Return",
															"src": "2807:83:1"
														}
													]
												},
												"id": 145,
												"nodeType": "IfStatement",
												"src": "2295:606:1",
												"trueBody": {
													"id": 130,
													"nodeType": "Block",
													"src": "2323:464:1",
													"statements": [
														{
															"assignments": [
																114
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 114,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2345:1:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 130,
																	"src": "2337:9:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 113,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2337:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 115,
															"nodeType": "VariableDeclarationStatement",
															"src": "2337:9:1"
														},
														{
															"assignments": [
																117
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 117,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2368:1:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 130,
																	"src": "2360:9:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 116,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2360:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 118,
															"nodeType": "VariableDeclarationStatement",
															"src": "2360:9:1"
														},
														{
															"assignments": [
																120
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 120,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2389:1:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 130,
																	"src": "2383:7:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 119,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2383:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 121,
															"nodeType": "VariableDeclarationStatement",
															"src": "2383:7:1"
														},
														{
															"AST": {
																"nativeSrc": "2560:171:1",
																"nodeType": "YulBlock",
																"src": "2560:171:1",
																"statements": [
																	{
																		"nativeSrc": "2578:32:1",
																		"nodeType": "YulAssignment",
																		"src": "2578:32:1",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2593:9:1",
																							"nodeType": "YulIdentifier",
																							"src": "2593:9:1"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2604:4:1",
																							"nodeType": "YulLiteral",
																							"src": "2604:4:1",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2589:3:1",
																						"nodeType": "YulIdentifier",
																						"src": "2589:3:1"
																					},
																					"nativeSrc": "2589:20:1",
																					"nodeType": "YulFunctionCall",
																					"src": "2589:20:1"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2583:5:1",
																				"nodeType": "YulIdentifier",
																				"src": "2583:5:1"
																			},
																			"nativeSrc": "2583:27:1",
																			"nodeType": "YulFunctionCall",
																			"src": "2583:27:1"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2578:1:1",
																				"nodeType": "YulIdentifier",
																				"src": "2578:1:1"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2627:32:1",
																		"nodeType": "YulAssignment",
																		"src": "2627:32:1",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2642:9:1",
																							"nodeType": "YulIdentifier",
																							"src": "2642:9:1"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2653:4:1",
																							"nodeType": "YulLiteral",
																							"src": "2653:4:1",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2638:3:1",
																						"nodeType": "YulIdentifier",
																						"src": "2638:3:1"
																					},
																					"nativeSrc": "2638:20:1",
																					"nodeType": "YulFunctionCall",
																					"src": "2638:20:1"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2632:5:1",
																				"nodeType": "YulIdentifier",
																				"src": "2632:5:1"
																			},
																			"nativeSrc": "2632:27:1",
																			"nodeType": "YulFunctionCall",
																			"src": "2632:27:1"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2627:1:1",
																				"nodeType": "YulIdentifier",
																				"src": "2627:1:1"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2676:41:1",
																		"nodeType": "YulAssignment",
																		"src": "2676:41:1",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2686:1:1",
																					"nodeType": "YulLiteral",
																					"src": "2686:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2699:9:1",
																									"nodeType": "YulIdentifier",
																									"src": "2699:9:1"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2710:4:1",
																									"nodeType": "YulLiteral",
																									"src": "2710:4:1",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2695:3:1",
																								"nodeType": "YulIdentifier",
																								"src": "2695:3:1"
																							},
																							"nativeSrc": "2695:20:1",
																							"nodeType": "YulFunctionCall",
																							"src": "2695:20:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2689:5:1",
																						"nodeType": "YulIdentifier",
																						"src": "2689:5:1"
																					},
																					"nativeSrc": "2689:27:1",
																					"nodeType": "YulFunctionCall",
																					"src": "2689:27:1"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2681:4:1",
																				"nodeType": "YulIdentifier",
																				"src": "2681:4:1"
																			},
																			"nativeSrc": "2681:36:1",
																			"nodeType": "YulFunctionCall",
																			"src": "2681:36:1"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2676:1:1",
																				"nodeType": "YulIdentifier",
																				"src": "2676:1:1"
																			}
																		]
																	}
																]
															},
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 114,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2578:1:1",
																	"valueSize": 1
																},
																{
																	"declaration": 117,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2627:1:1",
																	"valueSize": 1
																},
																{
																	"declaration": 99,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2593:9:1",
																	"valueSize": 1
																},
																{
																	"declaration": 99,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2642:9:1",
																	"valueSize": 1
																},
																{
																	"declaration": 99,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2699:9:1",
																	"valueSize": 1
																},
																{
																	"declaration": 120,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2676:1:1",
																	"valueSize": 1
																}
															],
															"flags": [
																"memory-safe"
															],
															"id": 122,
															"nodeType": "InlineAssembly",
															"src": "2535:196:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 124,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 97,
																		"src": "2762:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 125,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 120,
																		"src": "2768:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 126,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 114,
																		"src": "2771:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 127,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 117,
																		"src": "2774:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 123,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		147,
																		227,
																		335
																	],
																	"referencedDeclaration": 335,
																	"src": "2751:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2751:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 108,
															"id": 129,
															"nodeType": "Return",
															"src": "2744:32:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:1",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2166:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "2158:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 96,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2158:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2193:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "2180:22:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 98,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:60:1"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "recovered",
												"nameLocation": "2240:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "2232:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2232:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "err",
												"nameLocation": "2264:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "2251:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$81",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 104,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 103,
														"name": "RecoverError",
														"nameLocations": [
															"2251:12:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "2251:12:1"
													},
													"referencedDeclaration": 81,
													"src": "2251:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$81",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "errArg",
												"nameLocation": "2277:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "2269:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 106,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2269:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2231:53:1"
									},
									"scope": 421,
									"src": "2129:778:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 176,
										"nodeType": "Block",
										"src": "3801:168:1",
										"statements": [
											{
												"assignments": [
													158,
													161,
													163
												],
												"declarations": [
													{
														"constant": false,
														"id": 158,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3820:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 176,
														"src": "3812:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 157,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3812:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 161,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3844:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 176,
														"src": "3831:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$81",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 160,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 159,
																"name": "RecoverError",
																"nameLocations": [
																	"3831:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 81,
																"src": "3831:12:1"
															},
															"referencedDeclaration": 81,
															"src": "3831:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 163,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3859:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 176,
														"src": "3851:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 162,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3851:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 168,
												"initialValue": {
													"arguments": [
														{
															"id": 165,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "3882:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 166,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 152,
															"src": "3888:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 164,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															147,
															227,
															335
														],
														"referencedDeclaration": 147,
														"src": "3871:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3871:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3811:87:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 170,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 161,
															"src": "3920:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 171,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 163,
															"src": "3927:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 169,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "3908:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$81_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3908:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 173,
												"nodeType": "ExpressionStatement",
												"src": "3908:28:1"
											},
											{
												"expression": {
													"id": 174,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 158,
													"src": "3953:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 156,
												"id": 175,
												"nodeType": "Return",
												"src": "3946:16:1"
											}
										]
									},
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "2913:796:1",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3723:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3739:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "3731:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 149,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3731:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3758:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "3745:22:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 151,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3745:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3730:38:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "3792:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3792:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3791:9:1"
									},
									"scope": 421,
									"src": "3714:255:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "4348:342:1",
										"statements": [
											{
												"id": 225,
												"nodeType": "UncheckedBlock",
												"src": "4358:326:1",
												"statements": [
													{
														"assignments": [
															195
														],
														"declarations": [
															{
																"constant": false,
																"id": 195,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4390:1:1",
																"nodeType": "VariableDeclaration",
																"scope": 225,
																"src": "4382:9:1",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 194,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4382:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 202,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 201,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 196,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 184,
																"src": "4394:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 199,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4407:66:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 198,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4399:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 197,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4399:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 200,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4399:75:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4394:80:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4382:92:1"
													},
													{
														"assignments": [
															204
														],
														"declarations": [
															{
																"constant": false,
																"id": 204,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4591:1:1",
																"nodeType": "VariableDeclaration",
																"scope": 225,
																"src": "4585:7:1",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 203,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4585:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 217,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 215,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 212,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 209,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 184,
																							"src": "4610:2:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 208,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4602:7:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 207,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4602:7:1",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 210,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4602:11:1",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 211,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4617:3:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4602:18:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 213,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4601:20:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 214,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4624:2:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4601:25:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 206,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4595:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 205,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4595:5:1",
																	"typeDescriptions": {}
																}
															},
															"id": 216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4595:32:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4585:42:1"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 219,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 180,
																	"src": "4659:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 220,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 204,
																	"src": "4665:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 221,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 182,
																	"src": "4668:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 222,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 195,
																	"src": "4671:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 218,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	147,
																	227,
																	335
																],
																"referencedDeclaration": 335,
																"src": "4648:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4648:25:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 193,
														"id": 224,
														"nodeType": "Return",
														"src": "4641:32:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "3975:205:1",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]"
									},
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4194:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4222:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4214:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 179,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4214:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4244:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4236:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 181,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4263:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4255:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 183,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4255:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4204:67:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "recovered",
												"nameLocation": "4303:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4295:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4295:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "err",
												"nameLocation": "4327:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4314:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$81",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 189,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 188,
														"name": "RecoverError",
														"nameLocations": [
															"4314:12:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "4314:12:1"
													},
													"referencedDeclaration": 81,
													"src": "4314:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$81",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "errArg",
												"nameLocation": "4340:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "4332:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 191,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4332:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4294:53:1"
									},
									"scope": 421,
									"src": "4185:505:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "4903:164:1",
										"statements": [
											{
												"assignments": [
													240,
													243,
													245
												],
												"declarations": [
													{
														"constant": false,
														"id": 240,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4922:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 259,
														"src": "4914:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 239,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4914:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 243,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4946:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 259,
														"src": "4933:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$81",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 242,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 241,
																"name": "RecoverError",
																"nameLocations": [
																	"4933:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 81,
																"src": "4933:12:1"
															},
															"referencedDeclaration": 81,
															"src": "4933:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 245,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4961:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 259,
														"src": "4953:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 244,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4953:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 251,
												"initialValue": {
													"arguments": [
														{
															"id": 247,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "4984:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 248,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "4990:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 249,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 234,
															"src": "4993:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 246,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															147,
															227,
															335
														],
														"referencedDeclaration": 227,
														"src": "4973:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4973:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4913:83:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "5018:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 254,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "5025:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 252,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "5006:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$81_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5006:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "5006:28:1"
											},
											{
												"expression": {
													"id": 257,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 240,
													"src": "5051:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 238,
												"id": 258,
												"nodeType": "Return",
												"src": "5044:16:1"
											}
										]
									},
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "4696:116:1",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4826:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4842:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4834:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 229,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4834:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4856:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4848:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 231,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4848:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4867:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4859:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 233,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4859:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4833:37:1"
									},
									"returnParameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4894:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4894:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4893:9:1"
									},
									"scope": 421,
									"src": "4817:250:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 334,
										"nodeType": "Block",
										"src": "5382:1372:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 281,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 269,
																"src": "6278:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6270:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 279,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6270:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 282,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6270:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 283,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6283:66:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6270:79:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 295,
												"nodeType": "IfStatement",
												"src": "6266:164:1",
												"trueBody": {
													"id": 294,
													"nodeType": "Block",
													"src": "6351:79:1",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 287,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6381:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 286,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6373:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 285,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6373:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6373:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 289,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 81,
																			"src": "6385:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6398:17:1",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 80,
																		"src": "6385:30:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$81",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 291,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 269,
																		"src": "6417:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 292,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6372:47:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 278,
															"id": 293,
															"nodeType": "Return",
															"src": "6365:54:1"
														}
													]
												}
											},
											{
												"assignments": [
													297
												],
												"declarations": [
													{
														"constant": false,
														"id": 297,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6532:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 334,
														"src": "6524:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 296,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6524:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 304,
												"initialValue": {
													"arguments": [
														{
															"id": 299,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 263,
															"src": "6551:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 300,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 265,
															"src": "6557:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 301,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 267,
															"src": "6560:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 302,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 269,
															"src": "6563:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 298,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6541:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6541:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6524:41:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 305,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 297,
														"src": "6579:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 308,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6597:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6589:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 306,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6589:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 309,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6589:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6579:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 324,
												"nodeType": "IfStatement",
												"src": "6575:113:1",
												"trueBody": {
													"id": 323,
													"nodeType": "Block",
													"src": "6601:87:1",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 313,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6631:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 312,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6623:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 311,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6623:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 314,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6623:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 315,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 81,
																			"src": "6635:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6648:16:1",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 78,
																		"src": "6635:29:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$81",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 319,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6674:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6666:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 317,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6666:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6666:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 321,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6622:55:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 278,
															"id": 322,
															"nodeType": "Return",
															"src": "6615:62:1"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 325,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 297,
															"src": "6706:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 326,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 81,
																"src": "6714:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6727:7:1",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 77,
															"src": "6714:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6744:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 329,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6736:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 328,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6736:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 331,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6736:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 332,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6705:42:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 278,
												"id": 333,
												"nodeType": "Return",
												"src": "6698:49:1"
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "5073:125:1",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 335,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5212:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5240:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "5232:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 262,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5232:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5260:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "5254:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 264,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5254:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5279:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "5271:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 266,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5271:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5298:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "5290:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 268,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5290:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5222:83:1"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "recovered",
												"nameLocation": "5337:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "5329:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5329:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "err",
												"nameLocation": "5361:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "5348:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$81",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 274,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 273,
														"name": "RecoverError",
														"nameLocations": [
															"5348:12:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "5348:12:1"
													},
													"referencedDeclaration": 81,
													"src": "5348:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$81",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "errArg",
												"nameLocation": "5374:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "5366:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 276,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5366:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5328:53:1"
									},
									"scope": 421,
									"src": "5203:1551:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 370,
										"nodeType": "Block",
										"src": "6981:166:1",
										"statements": [
											{
												"assignments": [
													350,
													353,
													355
												],
												"declarations": [
													{
														"constant": false,
														"id": 350,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "7000:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 370,
														"src": "6992:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 349,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6992:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 353,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "7024:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 370,
														"src": "7011:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$81",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 352,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 351,
																"name": "RecoverError",
																"nameLocations": [
																	"7011:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 81,
																"src": "7011:12:1"
															},
															"referencedDeclaration": 81,
															"src": "7011:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 355,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "7039:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 370,
														"src": "7031:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 354,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "7031:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 362,
												"initialValue": {
													"arguments": [
														{
															"id": 357,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 338,
															"src": "7062:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 358,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "7068:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 359,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 342,
															"src": "7071:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 360,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "7074:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 356,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															147,
															227,
															335
														],
														"referencedDeclaration": 335,
														"src": "7051:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7051:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$81_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6991:85:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 364,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 353,
															"src": "7098:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 365,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "7105:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 363,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "7086:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$81_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7086:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 367,
												"nodeType": "ExpressionStatement",
												"src": "7086:28:1"
											},
											{
												"expression": {
													"id": 368,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 350,
													"src": "7131:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 348,
												"id": 369,
												"nodeType": "Return",
												"src": "7124:16:1"
											}
										]
									},
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "6760:122:1",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6896:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6912:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6904:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 337,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6904:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6924:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6918:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 339,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6918:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6935:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6927:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 341,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6927:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6946:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6938:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 343,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6938:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6903:45:1"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6972:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6972:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6971:9:1"
									},
									"scope": 421,
									"src": "6887:260:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 419,
										"nodeType": "Block",
										"src": "7352:460:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$81",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 380,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 375,
														"src": "7366:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$81",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 381,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "7375:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 382,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7388:7:1",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 77,
														"src": "7375:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$81",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7366:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$81",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 386,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 375,
															"src": "7462:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 387,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 81,
																"src": "7471:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7484:16:1",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 78,
															"src": "7471:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7462:38:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$81",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "7567:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$81",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 395,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 81,
																	"src": "7576:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 396,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7589:22:1",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 79,
																"src": "7576:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$81",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7567:44:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$81",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 409,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 406,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 375,
																	"src": "7701:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$81",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 407,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 81,
																		"src": "7710:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$81_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7723:17:1",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 80,
																	"src": "7710:30:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$81",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7701:39:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 415,
															"nodeType": "IfStatement",
															"src": "7697:109:1",
															"trueBody": {
																"id": 414,
																"nodeType": "Block",
																"src": "7742:64:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 411,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 377,
																					"src": "7786:8:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 410,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 94,
																				"src": "7763:22:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 412,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7763:32:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 413,
																		"nodeType": "RevertStatement",
																		"src": "7756:39:1"
																	}
																]
															}
														},
														"id": 416,
														"nodeType": "IfStatement",
														"src": "7563:243:1",
														"trueBody": {
															"id": 405,
															"nodeType": "Block",
															"src": "7613:78:1",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 401,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 377,
																						"src": "7670:8:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 400,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7662:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 399,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7662:7:1",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 402,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7662:17:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 398,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 89,
																			"src": "7634:27:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 403,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7634:46:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 404,
																	"nodeType": "RevertStatement",
																	"src": "7627:53:1"
																}
															]
														}
													},
													"id": 417,
													"nodeType": "IfStatement",
													"src": "7458:348:1",
													"trueBody": {
														"id": 393,
														"nodeType": "Block",
														"src": "7502:55:1",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 390,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 84,
																		"src": "7523:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7523:23:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 392,
																"nodeType": "RevertStatement",
																"src": "7516:30:1"
															}
														]
													}
												},
												"id": 418,
												"nodeType": "IfStatement",
												"src": "7362:444:1",
												"trueBody": {
													"id": 385,
													"nodeType": "Block",
													"src": "7397:55:1",
													"statements": [
														{
															"functionReturnParameters": 379,
															"id": 384,
															"nodeType": "Return",
															"src": "7411:7:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "7153:122:1",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7289:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7314:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "7301:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$81",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 374,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 373,
														"name": "RecoverError",
														"nameLocations": [
															"7301:12:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "7301:12:1"
													},
													"referencedDeclaration": 81,
													"src": "7301:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$81",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7329:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "7321:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 376,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7321:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7300:38:1"
									},
									"returnParameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7352:0:1"
									},
									"scope": 421,
									"src": "7280:532:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 422,
							"src": "344:7470:1",
							"usedErrors": [
								84,
								89,
								94
							],
							"usedEvents": []
						}
					],
					"src": "112:7703:1"
				},
				"id": 1
			},
			"E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol": {
				"ast": {
					"absolutePath": "E/Ephemeral Port/Randomness  Secure ephemeral “port” ID.sol",
					"exportedSymbols": {
						"Counters": [
							73
						],
						"ECDSA": [
							421
						],
						"SecureEphemeralPort": [
							490
						]
					},
					"id": 491,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 423,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
							"file": "@openzeppelin/contracts/utils/Counters.sol",
							"id": 424,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 491,
							"sourceUnit": 74,
							"src": "58:52:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"id": 425,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 491,
							"sourceUnit": 422,
							"src": "111:62:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SecureEphemeralPort",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 426,
								"nodeType": "StructuredDocumentation",
								"src": "175:202:2",
								"text": " DEFENSE TYPE:\n A contract that issues ephemeral port-like IDs using a secure incremental or random approach. \n Doesn’t allow user-chosen ephemeral IDs => no collisions or guess attacks."
							},
							"fullyImplemented": true,
							"id": 490,
							"linearizedBaseContracts": [
								490
							],
							"name": "SecureEphemeralPort",
							"nameLocation": "387:19:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 430,
									"libraryName": {
										"id": 427,
										"name": "Counters",
										"nameLocations": [
											"419:8:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 73,
										"src": "419:8:2"
									},
									"nodeType": "UsingForDirective",
									"src": "413:36:2",
									"typeName": {
										"id": 429,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 428,
											"name": "Counters.Counter",
											"nameLocations": [
												"432:8:2",
												"441:7:2"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 5,
											"src": "432:16:2"
										},
										"referencedDeclaration": 5,
										"src": "432:16:2",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 433,
									"mutability": "mutable",
									"name": "_sessionCounter",
									"nameLocation": "479:15:2",
									"nodeType": "VariableDeclaration",
									"scope": 490,
									"src": "454:40:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_Counter_$5_storage",
										"typeString": "struct Counters.Counter"
									},
									"typeName": {
										"id": 432,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 431,
											"name": "Counters.Counter",
											"nameLocations": [
												"454:8:2",
												"463:7:2"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 5,
											"src": "454:16:2"
										},
										"referencedDeclaration": 5,
										"src": "454:16:2",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "f5a94034",
									"id": 437,
									"mutability": "mutable",
									"name": "ephemeralOwner",
									"nameLocation": "569:14:2",
									"nodeType": "VariableDeclaration",
									"scope": 490,
									"src": "534:49:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 436,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 434,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "542:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "534:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 435,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "553:7:2",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "d8aeb6b9f86d6e27269b062abae340b8aa70766460b785b655e5653f1485f4c0",
									"id": 443,
									"name": "EphemeralAllocated",
									"nameLocation": "596:18:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"indexed": false,
												"mutability": "mutable",
												"name": "ephemeralID",
												"nameLocation": "623:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "615:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "615:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"indexed": false,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "644:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "636:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "614:36:2"
									},
									"src": "590:61:2"
								},
								{
									"body": {
										"id": 471,
										"nodeType": "Block",
										"src": "834:191:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 447,
															"name": "_sessionCounter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 433,
															"src": "844:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$5_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 449,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "860:9:2",
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 31,
														"src": "844:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$5_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$5_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "844:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 451,
												"nodeType": "ExpressionStatement",
												"src": "844:27:2"
											},
											{
												"assignments": [
													453
												],
												"declarations": [
													{
														"constant": false,
														"id": 453,
														"mutability": "mutable",
														"name": "newID",
														"nameLocation": "889:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 471,
														"src": "881:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 452,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "881:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 457,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 454,
															"name": "_sessionCounter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 433,
															"src": "897:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$5_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 455,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "913:7:2",
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 17,
														"src": "897:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$5_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$5_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "897:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "881:41:2"
											},
											{
												"expression": {
													"id": 463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 458,
															"name": "ephemeralOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "932:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 460,
														"indexExpression": {
															"id": 459,
															"name": "newID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "947:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "932:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 461,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "956:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 462,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "960:6:2",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "956:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "932:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 464,
												"nodeType": "ExpressionStatement",
												"src": "932:34:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 466,
															"name": "newID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "1000:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 467,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1007:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1011:6:2",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1007:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 465,
														"name": "EphemeralAllocated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 443,
														"src": "981:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "981:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 470,
												"nodeType": "EmitStatement",
												"src": "976:42:2"
											}
										]
									},
									"documentation": {
										"id": 444,
										"nodeType": "StructuredDocumentation",
										"src": "657:136:2",
										"text": " @dev The contract picks ephemeral IDs sequentially or from VRF,\n not the user. Minimizes collision/hijack risk."
									},
									"functionSelector": "be1f23c0",
									"id": 472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createEphemeral",
									"nameLocation": "807:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "822:2:2"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "834:0:2"
									},
									"scope": 490,
									"src": "798:227:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 488,
										"nodeType": "Block",
										"src": "1186:59:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 482,
															"name": "ephemeralOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "1203:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 484,
														"indexExpression": {
															"id": 483,
															"name": "ephemeralID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "1218:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1203:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 485,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 477,
														"src": "1234:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1203:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 481,
												"id": 487,
												"nodeType": "Return",
												"src": "1196:42:2"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "1031:67:2",
										"text": " @dev Example usage: check ephemeral ID ownership"
									},
									"functionSelector": "9ac016e2",
									"id": 489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isOwnerOf",
									"nameLocation": "1112:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "ephemeralID",
												"nameLocation": "1130:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "1122:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1122:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1151:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "1143:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1143:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1121:35:2"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "1180:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 479,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1180:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1179:6:2"
									},
									"scope": 490,
									"src": "1103:142:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 491,
							"src": "378:869:2",
							"usedErrors": [],
							"usedEvents": [
								443
							]
						}
					],
					"src": "32:1216:2"
				},
				"id": 2
			}
		}
	}
}