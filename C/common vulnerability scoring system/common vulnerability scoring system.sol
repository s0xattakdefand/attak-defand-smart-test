// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract CVSSScoringRegistry {
    address public admin;

    struct CVSSRecord {
        string cveId;
        uint256 score;        // Range: 0 to 100 (e.g., 875 = CVSS 8.75)
        string severity;      // "Low", "Medium", "High", "Critical"
        uint256 updatedAt;
        bool active;
    }

    mapping(string => CVSSRecord) public scores;     // cveId => CVSSRecord
    string[] public allCVEIds;

    event ScoreSet(string indexed cveId, uint256 score, string severity);
    event ScoreDeactivated(string indexed cveId);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not admin");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function setScore(string calldata cveId, uint256 score) external onlyAdmin {
        require(score <= 1000, "Score must be 0-1000");

        string memory sev = _getSeverity(score);
        CVSSRecord storage r = scores[cveId];

        if (r.updatedAt == 0) {
            allCVEIds.push(cveId);
        }

        scores[cveId] = CVSSRecord({
            cveId: cveId,
            score: score,
            severity: sev,
            updatedAt: block.timestamp,
            active: true
        });

        emit ScoreSet(cveId, score, sev);
    }

    function deactivateScore(string calldata cveId) external onlyAdmin {
        require(scores[cveId].updatedAt > 0, "Not found");
        scores[cveId].active = false;
        emit ScoreDeactivated(cveId);
    }

    function getScore(string calldata cveId) external view returns (
        uint256 score,
        string memory severity,
        uint256 updatedAt,
        bool active
    ) {
        CVSSRecord memory r = scores[cveId];
        return (r.score, r.severity, r.updatedAt, r.active);
    }

    function _getSeverity(uint256 score) internal pure returns (string memory) {
        if (score == 0) return "None";
        else if (score <= 390) return "Low";
        else if (score <= 690) return "Medium";
        else if (score <= 890) return "High";
        else return "Critical";
    }

    function getAllCVEIds() external view returns (string[] memory) {
        return allCVEIds;
    }
}
