// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract CVEEnumRegistry {
    address public admin;

    struct CVEEntry {
        string cveId;             // e.g., "CVE-2024-10001"
        string title;
        string description;
        string severity;          // e.g., "High", "Critical"
        uint256 publishedAt;
        bool active;
    }

    mapping(string => CVEEntry) public cves;                   // CVE ID => Entry
    mapping(address => string[]) public contractToCVEs;        // Contract => CVE IDs
    mapping(string => address[]) public cveToContracts;        // CVE => affected contracts

    event CVEDeclared(string indexed cveId, string title);
    event ContractLinked(string indexed cveId, address indexed contractAddress);
    event CVEStatusChanged(string indexed cveId, bool active);

    modifier onlyAdmin() {
        require(msg.sender == admin, "CVEEnum: Not admin");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function declareCVE(
        string calldata cveId,
        string calldata title,
        string calldata description,
        string calldata severity
    ) external onlyAdmin {
        require(cves[cveId].publishedAt == 0, "CVE already declared");

        cves[cveId] = CVEEntry({
            cveId: cveId,
            title: title,
            description: description,
            severity: severity,
            publishedAt: block.timestamp,
            active: true
        });

        emit CVEDeclared(cveId, title);
    }

    function linkContract(string calldata cveId, address contractAddress) external onlyAdmin {
        require(cves[cveId].publishedAt > 0, "CVE not declared");

        contractToCVEs[contractAddress].push(cveId);
        cveToContracts[cveId].push(contractAddress);

        emit ContractLinked(cveId, contractAddress);
    }

    function setCVEStatus(string calldata cveId, bool status) external onlyAdmin {
        require(cves[cveId].publishedAt > 0, "CVE not declared");
        cves[cveId].active = status;
        emit CVEStatusChanged(cveId, status);
    }

    function getCVEsForContract(address contractAddr) external view returns (string[] memory) {
        return contractToCVEs[contractAddr];
    }

    function getContractsForCVE(string calldata cveId) external view returns (address[] memory) {
        return cveToContracts[cveId];
    }

    function getCVE(string calldata cveId) external view returns (
        string memory title,
        string memory description,
        string memory severity,
        uint256 publishedAt,
        bool active
    ) {
        CVEEntry memory c = cves[cveId];
        return (c.title, c.description, c.severity, c.publishedAt, c.active);
    }
}
